// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: au/com/codeka/warworlds/common/proto/chat.proto at 6:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A chat message, who it's from, the kind of message and whatnot.
 */
public final class ChatMessage extends Message<ChatMessage, ChatMessage.Builder> {
  public static final ProtoAdapter<ChatMessage> ADAPTER = new ProtoAdapter_ChatMessage();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_MESSAGE = "";

  public static final Long DEFAULT_EMPIRE_ID = 0L;

  public static final Long DEFAULT_DATE_POSTED = 0L;

  public static final Long DEFAULT_ALLIANCE_ID = 0L;

  public static final String DEFAULT_MESSAGE_EN = "";

  public static final Long DEFAULT_ROOM_ID = 0L;

  public static final Long DEFAULT_PROFANITY_LEVEL = 0L;

  public static final MessageAction DEFAULT_ACTION = MessageAction.Normal;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long id;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String message;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long empire_id;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long date_posted;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long alliance_id;

  /**
   * If the message was auto-translated to english, this will be the english translation.
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String message_en;

  /**
   * If the message was intended for a specific room, this will be the ID of the room.
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long room_id;

  /**
   * "profanity" level, 0 == not profane, 1 == somewhat profane, 2 == very profane. Used in
   * conjunction with client-side filtering of chat messages.
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long profanity_level;

  @WireField(
      tag = 8,
      adapter = "au.com.codeka.warworlds.common.proto.ChatMessage$MessageAction#ADAPTER"
  )
  public final MessageAction action;

  public ChatMessage(Long id, String message, Long empire_id, Long date_posted, Long alliance_id, String message_en, Long room_id, Long profanity_level, MessageAction action) {
    this(id, message, empire_id, date_posted, alliance_id, message_en, room_id, profanity_level, action, ByteString.EMPTY);
  }

  public ChatMessage(Long id, String message, Long empire_id, Long date_posted, Long alliance_id, String message_en, Long room_id, Long profanity_level, MessageAction action, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.message = message;
    this.empire_id = empire_id;
    this.date_posted = date_posted;
    this.alliance_id = alliance_id;
    this.message_en = message_en;
    this.room_id = room_id;
    this.profanity_level = profanity_level;
    this.action = action;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.message = message;
    builder.empire_id = empire_id;
    builder.date_posted = date_posted;
    builder.alliance_id = alliance_id;
    builder.message_en = message_en;
    builder.room_id = room_id;
    builder.profanity_level = profanity_level;
    builder.action = action;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChatMessage)) return false;
    ChatMessage o = (ChatMessage) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(message, o.message)
        && Internal.equals(empire_id, o.empire_id)
        && Internal.equals(date_posted, o.date_posted)
        && Internal.equals(alliance_id, o.alliance_id)
        && Internal.equals(message_en, o.message_en)
        && Internal.equals(room_id, o.room_id)
        && Internal.equals(profanity_level, o.profanity_level)
        && Internal.equals(action, o.action);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (message != null ? message.hashCode() : 0);
      result = result * 37 + (empire_id != null ? empire_id.hashCode() : 0);
      result = result * 37 + (date_posted != null ? date_posted.hashCode() : 0);
      result = result * 37 + (alliance_id != null ? alliance_id.hashCode() : 0);
      result = result * 37 + (message_en != null ? message_en.hashCode() : 0);
      result = result * 37 + (room_id != null ? room_id.hashCode() : 0);
      result = result * 37 + (profanity_level != null ? profanity_level.hashCode() : 0);
      result = result * 37 + (action != null ? action.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (message != null) builder.append(", message=").append(message);
    if (empire_id != null) builder.append(", empire_id=").append(empire_id);
    if (date_posted != null) builder.append(", date_posted=").append(date_posted);
    if (alliance_id != null) builder.append(", alliance_id=").append(alliance_id);
    if (message_en != null) builder.append(", message_en=").append(message_en);
    if (room_id != null) builder.append(", room_id=").append(room_id);
    if (profanity_level != null) builder.append(", profanity_level=").append(profanity_level);
    if (action != null) builder.append(", action=").append(action);
    return builder.replace(0, 2, "ChatMessage{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ChatMessage, Builder> {
    public Long id;

    public String message;

    public Long empire_id;

    public Long date_posted;

    public Long alliance_id;

    public String message_en;

    public Long room_id;

    public Long profanity_level;

    public MessageAction action;

    public Builder() {
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    public Builder message(String message) {
      this.message = message;
      return this;
    }

    public Builder empire_id(Long empire_id) {
      this.empire_id = empire_id;
      return this;
    }

    public Builder date_posted(Long date_posted) {
      this.date_posted = date_posted;
      return this;
    }

    public Builder alliance_id(Long alliance_id) {
      this.alliance_id = alliance_id;
      return this;
    }

    /**
     * If the message was auto-translated to english, this will be the english translation.
     */
    public Builder message_en(String message_en) {
      this.message_en = message_en;
      return this;
    }

    /**
     * If the message was intended for a specific room, this will be the ID of the room.
     */
    public Builder room_id(Long room_id) {
      this.room_id = room_id;
      return this;
    }

    /**
     * "profanity" level, 0 == not profane, 1 == somewhat profane, 2 == very profane. Used in
     * conjunction with client-side filtering of chat messages.
     */
    public Builder profanity_level(Long profanity_level) {
      this.profanity_level = profanity_level;
      return this;
    }

    public Builder action(MessageAction action) {
      this.action = action;
      return this;
    }

    @Override
    public ChatMessage build() {
      return new ChatMessage(id, message, empire_id, date_posted, alliance_id, message_en, room_id, profanity_level, action, buildUnknownFields());
    }
  }

  /**
   * The "action" of this message, allows us to notify participants of a conversation
   * via special messages with a custom action.
   */
  public enum MessageAction implements WireEnum {
    /**
     * a "normal" chat message, the default
     */
    Normal(0),

    /**
     * a new participant was added
     */
    ParticipantAdded(1),

    /**
     * someone left the conversation
     */
    ParticipantLeft(2);

    public static final ProtoAdapter<MessageAction> ADAPTER = ProtoAdapter.newEnumAdapter(MessageAction.class);

    private final int value;

    MessageAction(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static MessageAction fromValue(int value) {
      switch (value) {
        case 0: return Normal;
        case 1: return ParticipantAdded;
        case 2: return ParticipantLeft;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_ChatMessage extends ProtoAdapter<ChatMessage> {
    ProtoAdapter_ChatMessage() {
      super(FieldEncoding.LENGTH_DELIMITED, ChatMessage.class);
    }

    @Override
    public int encodedSize(ChatMessage value) {
      return (value.id != null ? ProtoAdapter.INT64.encodedSizeWithTag(7, value.id) : 0)
          + (value.message != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.message) : 0)
          + (value.empire_id != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.empire_id) : 0)
          + (value.date_posted != null ? ProtoAdapter.INT64.encodedSizeWithTag(3, value.date_posted) : 0)
          + (value.alliance_id != null ? ProtoAdapter.INT64.encodedSizeWithTag(4, value.alliance_id) : 0)
          + (value.message_en != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.message_en) : 0)
          + (value.room_id != null ? ProtoAdapter.INT64.encodedSizeWithTag(6, value.room_id) : 0)
          + (value.profanity_level != null ? ProtoAdapter.INT64.encodedSizeWithTag(9, value.profanity_level) : 0)
          + (value.action != null ? MessageAction.ADAPTER.encodedSizeWithTag(8, value.action) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ChatMessage value) throws IOException {
      if (value.id != null) ProtoAdapter.INT64.encodeWithTag(writer, 7, value.id);
      if (value.message != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.message);
      if (value.empire_id != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.empire_id);
      if (value.date_posted != null) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.date_posted);
      if (value.alliance_id != null) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.alliance_id);
      if (value.message_en != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.message_en);
      if (value.room_id != null) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.room_id);
      if (value.profanity_level != null) ProtoAdapter.INT64.encodeWithTag(writer, 9, value.profanity_level);
      if (value.action != null) MessageAction.ADAPTER.encodeWithTag(writer, 8, value.action);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ChatMessage decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 7: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 1: builder.message(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.empire_id(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.date_posted(ProtoAdapter.INT64.decode(reader)); break;
          case 4: builder.alliance_id(ProtoAdapter.INT64.decode(reader)); break;
          case 5: builder.message_en(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.room_id(ProtoAdapter.INT64.decode(reader)); break;
          case 9: builder.profanity_level(ProtoAdapter.INT64.decode(reader)); break;
          case 8: {
            try {
              builder.action(MessageAction.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ChatMessage redact(ChatMessage value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
