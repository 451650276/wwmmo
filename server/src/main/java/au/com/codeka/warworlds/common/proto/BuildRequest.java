// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: au/com/codeka/warworlds/common/proto/colony.proto at 63:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A build request is an in-progress build for the current colony.
 */
public final class BuildRequest extends Message<BuildRequest, BuildRequest.Builder> {
  public static final ProtoAdapter<BuildRequest> ADAPTER = new ProtoAdapter_BuildRequest();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Design.DesignType DEFAULT_DESIGN_TYPE = Design.DesignType.UNKNOWN_DESIGN;

  public static final Integer DEFAULT_COUNT = 0;

  public static final Long DEFAULT_START_TIME = 0L;

  public static final Long DEFAULT_END_TIME = 0L;

  public static final Float DEFAULT_PROGRESS = 0.0f;

  public static final Float DEFAULT_MINERALS_EFFICIENCY = 0.0f;

  public static final Float DEFAULT_POPULATION_EFFICIENCY = 0.0f;

  public static final Float DEFAULT_PROGRESS_PER_STEP = 0.0f;

  public static final Float DEFAULT_DELTA_MINERALS_PER_HOUR = 0.0f;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long id;

  /**
   * The type of the design being created.
   */
  @WireField(
      tag = 2,
      adapter = "au.com.codeka.warworlds.common.proto.Design$DesignType#ADAPTER"
  )
  public final Design.DesignType design_type;

  /**
   * The number of things being created. Required when building ships, otherwise ignored.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer count;

  /**
   * The start and end time of this build, in millis since epoch.
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long start_time;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long end_time;

  /**
   * The "progress" of the build, from 0 (just started) to 1.0 (complete). It's not always going to
   * relate to start_time/end_time (due to lack of resources, changing focus etc).
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float progress;

  /**
   * The "efficiency" of the minerals/populations. These values will together add up to 1, and will
   * describe the relative efficiency of the minerals/population you have. That is,
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float minerals_efficiency;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float population_efficiency;

  /**
   * The amount of progress we're making per step, so we can update counters and stuff in real-time.
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float progress_per_step;

  /**
   * The delta of goods per hour this build request is CURRENTLY using.
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float delta_minerals_per_hour;

  public BuildRequest(Long id, Design.DesignType design_type, Integer count, Long start_time, Long end_time, Float progress, Float minerals_efficiency, Float population_efficiency, Float progress_per_step, Float delta_minerals_per_hour) {
    this(id, design_type, count, start_time, end_time, progress, minerals_efficiency, population_efficiency, progress_per_step, delta_minerals_per_hour, ByteString.EMPTY);
  }

  public BuildRequest(Long id, Design.DesignType design_type, Integer count, Long start_time, Long end_time, Float progress, Float minerals_efficiency, Float population_efficiency, Float progress_per_step, Float delta_minerals_per_hour, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.design_type = design_type;
    this.count = count;
    this.start_time = start_time;
    this.end_time = end_time;
    this.progress = progress;
    this.minerals_efficiency = minerals_efficiency;
    this.population_efficiency = population_efficiency;
    this.progress_per_step = progress_per_step;
    this.delta_minerals_per_hour = delta_minerals_per_hour;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.design_type = design_type;
    builder.count = count;
    builder.start_time = start_time;
    builder.end_time = end_time;
    builder.progress = progress;
    builder.minerals_efficiency = minerals_efficiency;
    builder.population_efficiency = population_efficiency;
    builder.progress_per_step = progress_per_step;
    builder.delta_minerals_per_hour = delta_minerals_per_hour;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BuildRequest)) return false;
    BuildRequest o = (BuildRequest) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(design_type, o.design_type)
        && Internal.equals(count, o.count)
        && Internal.equals(start_time, o.start_time)
        && Internal.equals(end_time, o.end_time)
        && Internal.equals(progress, o.progress)
        && Internal.equals(minerals_efficiency, o.minerals_efficiency)
        && Internal.equals(population_efficiency, o.population_efficiency)
        && Internal.equals(progress_per_step, o.progress_per_step)
        && Internal.equals(delta_minerals_per_hour, o.delta_minerals_per_hour);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (design_type != null ? design_type.hashCode() : 0);
      result = result * 37 + (count != null ? count.hashCode() : 0);
      result = result * 37 + (start_time != null ? start_time.hashCode() : 0);
      result = result * 37 + (end_time != null ? end_time.hashCode() : 0);
      result = result * 37 + (progress != null ? progress.hashCode() : 0);
      result = result * 37 + (minerals_efficiency != null ? minerals_efficiency.hashCode() : 0);
      result = result * 37 + (population_efficiency != null ? population_efficiency.hashCode() : 0);
      result = result * 37 + (progress_per_step != null ? progress_per_step.hashCode() : 0);
      result = result * 37 + (delta_minerals_per_hour != null ? delta_minerals_per_hour.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (design_type != null) builder.append(", design_type=").append(design_type);
    if (count != null) builder.append(", count=").append(count);
    if (start_time != null) builder.append(", start_time=").append(start_time);
    if (end_time != null) builder.append(", end_time=").append(end_time);
    if (progress != null) builder.append(", progress=").append(progress);
    if (minerals_efficiency != null) builder.append(", minerals_efficiency=").append(minerals_efficiency);
    if (population_efficiency != null) builder.append(", population_efficiency=").append(population_efficiency);
    if (progress_per_step != null) builder.append(", progress_per_step=").append(progress_per_step);
    if (delta_minerals_per_hour != null) builder.append(", delta_minerals_per_hour=").append(delta_minerals_per_hour);
    return builder.replace(0, 2, "BuildRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<BuildRequest, Builder> {
    public Long id;

    public Design.DesignType design_type;

    public Integer count;

    public Long start_time;

    public Long end_time;

    public Float progress;

    public Float minerals_efficiency;

    public Float population_efficiency;

    public Float progress_per_step;

    public Float delta_minerals_per_hour;

    public Builder() {
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * The type of the design being created.
     */
    public Builder design_type(Design.DesignType design_type) {
      this.design_type = design_type;
      return this;
    }

    /**
     * The number of things being created. Required when building ships, otherwise ignored.
     */
    public Builder count(Integer count) {
      this.count = count;
      return this;
    }

    /**
     * The start and end time of this build, in millis since epoch.
     */
    public Builder start_time(Long start_time) {
      this.start_time = start_time;
      return this;
    }

    public Builder end_time(Long end_time) {
      this.end_time = end_time;
      return this;
    }

    /**
     * The "progress" of the build, from 0 (just started) to 1.0 (complete). It's not always going to
     * relate to start_time/end_time (due to lack of resources, changing focus etc).
     */
    public Builder progress(Float progress) {
      this.progress = progress;
      return this;
    }

    /**
     * The "efficiency" of the minerals/populations. These values will together add up to 1, and will
     * describe the relative efficiency of the minerals/population you have. That is,
     */
    public Builder minerals_efficiency(Float minerals_efficiency) {
      this.minerals_efficiency = minerals_efficiency;
      return this;
    }

    public Builder population_efficiency(Float population_efficiency) {
      this.population_efficiency = population_efficiency;
      return this;
    }

    /**
     * The amount of progress we're making per step, so we can update counters and stuff in real-time.
     */
    public Builder progress_per_step(Float progress_per_step) {
      this.progress_per_step = progress_per_step;
      return this;
    }

    /**
     * The delta of goods per hour this build request is CURRENTLY using.
     */
    public Builder delta_minerals_per_hour(Float delta_minerals_per_hour) {
      this.delta_minerals_per_hour = delta_minerals_per_hour;
      return this;
    }

    @Override
    public BuildRequest build() {
      return new BuildRequest(id, design_type, count, start_time, end_time, progress, minerals_efficiency, population_efficiency, progress_per_step, delta_minerals_per_hour, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BuildRequest extends ProtoAdapter<BuildRequest> {
    ProtoAdapter_BuildRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, BuildRequest.class);
    }

    @Override
    public int encodedSize(BuildRequest value) {
      return (value.id != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.design_type != null ? Design.DesignType.ADAPTER.encodedSizeWithTag(2, value.design_type) : 0)
          + (value.count != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.count) : 0)
          + (value.start_time != null ? ProtoAdapter.INT64.encodedSizeWithTag(4, value.start_time) : 0)
          + (value.end_time != null ? ProtoAdapter.INT64.encodedSizeWithTag(5, value.end_time) : 0)
          + (value.progress != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(6, value.progress) : 0)
          + (value.minerals_efficiency != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(7, value.minerals_efficiency) : 0)
          + (value.population_efficiency != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(8, value.population_efficiency) : 0)
          + (value.progress_per_step != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(9, value.progress_per_step) : 0)
          + (value.delta_minerals_per_hour != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(10, value.delta_minerals_per_hour) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BuildRequest value) throws IOException {
      if (value.id != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id);
      if (value.design_type != null) Design.DesignType.ADAPTER.encodeWithTag(writer, 2, value.design_type);
      if (value.count != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.count);
      if (value.start_time != null) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.start_time);
      if (value.end_time != null) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.end_time);
      if (value.progress != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 6, value.progress);
      if (value.minerals_efficiency != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 7, value.minerals_efficiency);
      if (value.population_efficiency != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 8, value.population_efficiency);
      if (value.progress_per_step != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 9, value.progress_per_step);
      if (value.delta_minerals_per_hour != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 10, value.delta_minerals_per_hour);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BuildRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 2: {
            try {
              builder.design_type(Design.DesignType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.count(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.start_time(ProtoAdapter.INT64.decode(reader)); break;
          case 5: builder.end_time(ProtoAdapter.INT64.decode(reader)); break;
          case 6: builder.progress(ProtoAdapter.FLOAT.decode(reader)); break;
          case 7: builder.minerals_efficiency(ProtoAdapter.FLOAT.decode(reader)); break;
          case 8: builder.population_efficiency(ProtoAdapter.FLOAT.decode(reader)); break;
          case 9: builder.progress_per_step(ProtoAdapter.FLOAT.decode(reader)); break;
          case 10: builder.delta_minerals_per_hour(ProtoAdapter.FLOAT.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BuildRequest redact(BuildRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
