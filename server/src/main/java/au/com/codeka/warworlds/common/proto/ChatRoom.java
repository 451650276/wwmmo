// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: au/com/codeka/warworlds/common/proto/chat.proto at 35:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * A room is a private chat between two or more participants.
 */
public final class ChatRoom extends Message<ChatRoom, ChatRoom.Builder> {
  public static final ProtoAdapter<ChatRoom> ADAPTER = new ProtoAdapter_ChatRoom();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_NAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  @WireField(
      tag = 3,
      adapter = "au.com.codeka.warworlds.common.proto.ChatParticipant#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ChatParticipant> participants;

  public ChatRoom(Long id, String name, List<ChatParticipant> participants) {
    this(id, name, participants, ByteString.EMPTY);
  }

  public ChatRoom(Long id, String name, List<ChatParticipant> participants, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.name = name;
    this.participants = Internal.immutableCopyOf("participants", participants);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.name = name;
    builder.participants = Internal.copyOf("participants", participants);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChatRoom)) return false;
    ChatRoom o = (ChatRoom) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(name, o.name)
        && Internal.equals(participants, o.participants);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (participants != null ? participants.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (name != null) builder.append(", name=").append(name);
    if (participants != null) builder.append(", participants=").append(participants);
    return builder.replace(0, 2, "ChatRoom{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ChatRoom, Builder> {
    public Long id;

    public String name;

    public List<ChatParticipant> participants;

    public Builder() {
      participants = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder participants(List<ChatParticipant> participants) {
      Internal.checkElementsNotNull(participants);
      this.participants = participants;
      return this;
    }

    @Override
    public ChatRoom build() {
      return new ChatRoom(id, name, participants, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ChatRoom extends ProtoAdapter<ChatRoom> {
    ProtoAdapter_ChatRoom() {
      super(FieldEncoding.LENGTH_DELIMITED, ChatRoom.class);
    }

    @Override
    public int encodedSize(ChatRoom value) {
      return (value.id != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.name) : 0)
          + ChatParticipant.ADAPTER.asRepeated().encodedSizeWithTag(3, value.participants)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ChatRoom value) throws IOException {
      if (value.id != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id);
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      if (value.participants != null) ChatParticipant.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.participants);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ChatRoom decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.participants.add(ChatParticipant.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ChatRoom redact(ChatRoom value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.participants, ChatParticipant.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
