// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: au/com/codeka/warworlds/common/proto/packets.proto at 73:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * A bunch of chat messages. If sending to the server, should contain only a single message. If
 * being received from the server, could contain multiple messages for multiple rooms.
 */
public final class ChatMessagesPacket extends Message<ChatMessagesPacket, ChatMessagesPacket.Builder> {
  public static final ProtoAdapter<ChatMessagesPacket> ADAPTER = new ProtoAdapter_ChatMessagesPacket();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "au.com.codeka.warworlds.common.proto.ChatMessage#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ChatMessage> messages;

  public ChatMessagesPacket(List<ChatMessage> messages) {
    this(messages, ByteString.EMPTY);
  }

  public ChatMessagesPacket(List<ChatMessage> messages, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.messages = Internal.immutableCopyOf("messages", messages);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.messages = Internal.copyOf("messages", messages);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChatMessagesPacket)) return false;
    ChatMessagesPacket o = (ChatMessagesPacket) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(messages, o.messages);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (messages != null ? messages.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (messages != null) builder.append(", messages=").append(messages);
    return builder.replace(0, 2, "ChatMessagesPacket{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ChatMessagesPacket, Builder> {
    public List<ChatMessage> messages;

    public Builder() {
      messages = Internal.newMutableList();
    }

    public Builder messages(List<ChatMessage> messages) {
      Internal.checkElementsNotNull(messages);
      this.messages = messages;
      return this;
    }

    @Override
    public ChatMessagesPacket build() {
      return new ChatMessagesPacket(messages, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ChatMessagesPacket extends ProtoAdapter<ChatMessagesPacket> {
    ProtoAdapter_ChatMessagesPacket() {
      super(FieldEncoding.LENGTH_DELIMITED, ChatMessagesPacket.class);
    }

    @Override
    public int encodedSize(ChatMessagesPacket value) {
      return ChatMessage.ADAPTER.asRepeated().encodedSizeWithTag(1, value.messages)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ChatMessagesPacket value) throws IOException {
      if (value.messages != null) ChatMessage.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.messages);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ChatMessagesPacket decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.messages.add(ChatMessage.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ChatMessagesPacket redact(ChatMessagesPacket value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.messages, ChatMessage.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
