// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: au/com/codeka/warworlds/common/proto/star.proto at 111:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * A CombatReport is used to detail the results of combat. Combat occurs when an opposing fleet
 * arrives at a star. We keep at most 10 combat reports per star (after a while, they don't really
 * matter any more).
 */
public final class CombatReport extends Message<CombatReport, CombatReport.Builder> {
  public static final ProtoAdapter<CombatReport> ADAPTER = new ProtoAdapter_CombatReport();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TIME = 0L;

  /**
   * The time the combat happened.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long time;

  /**
   * The list of fleets that existed before the combat began.
   */
  @WireField(
      tag = 2,
      adapter = "au.com.codeka.warworlds.common.proto.Fleet#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Fleet> fleets_before;

  /**
   * The list of fleets that remained after the combat completed.
   */
  @WireField(
      tag = 3,
      adapter = "au.com.codeka.warworlds.common.proto.Fleet#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Fleet> fleets_after;

  public CombatReport(Long time, List<Fleet> fleets_before, List<Fleet> fleets_after) {
    this(time, fleets_before, fleets_after, ByteString.EMPTY);
  }

  public CombatReport(Long time, List<Fleet> fleets_before, List<Fleet> fleets_after, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.time = time;
    this.fleets_before = Internal.immutableCopyOf("fleets_before", fleets_before);
    this.fleets_after = Internal.immutableCopyOf("fleets_after", fleets_after);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.time = time;
    builder.fleets_before = Internal.copyOf("fleets_before", fleets_before);
    builder.fleets_after = Internal.copyOf("fleets_after", fleets_after);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CombatReport)) return false;
    CombatReport o = (CombatReport) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(time, o.time)
        && Internal.equals(fleets_before, o.fleets_before)
        && Internal.equals(fleets_after, o.fleets_after);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (time != null ? time.hashCode() : 0);
      result = result * 37 + (fleets_before != null ? fleets_before.hashCode() : 1);
      result = result * 37 + (fleets_after != null ? fleets_after.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (time != null) builder.append(", time=").append(time);
    if (fleets_before != null) builder.append(", fleets_before=").append(fleets_before);
    if (fleets_after != null) builder.append(", fleets_after=").append(fleets_after);
    return builder.replace(0, 2, "CombatReport{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CombatReport, Builder> {
    public Long time;

    public List<Fleet> fleets_before;

    public List<Fleet> fleets_after;

    public Builder() {
      fleets_before = Internal.newMutableList();
      fleets_after = Internal.newMutableList();
    }

    /**
     * The time the combat happened.
     */
    public Builder time(Long time) {
      this.time = time;
      return this;
    }

    /**
     * The list of fleets that existed before the combat began.
     */
    public Builder fleets_before(List<Fleet> fleets_before) {
      Internal.checkElementsNotNull(fleets_before);
      this.fleets_before = fleets_before;
      return this;
    }

    /**
     * The list of fleets that remained after the combat completed.
     */
    public Builder fleets_after(List<Fleet> fleets_after) {
      Internal.checkElementsNotNull(fleets_after);
      this.fleets_after = fleets_after;
      return this;
    }

    @Override
    public CombatReport build() {
      return new CombatReport(time, fleets_before, fleets_after, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CombatReport extends ProtoAdapter<CombatReport> {
    ProtoAdapter_CombatReport() {
      super(FieldEncoding.LENGTH_DELIMITED, CombatReport.class);
    }

    @Override
    public int encodedSize(CombatReport value) {
      return (value.time != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.time) : 0)
          + Fleet.ADAPTER.asRepeated().encodedSizeWithTag(2, value.fleets_before)
          + Fleet.ADAPTER.asRepeated().encodedSizeWithTag(3, value.fleets_after)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CombatReport value) throws IOException {
      if (value.time != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.time);
      if (value.fleets_before != null) Fleet.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.fleets_before);
      if (value.fleets_after != null) Fleet.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.fleets_after);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CombatReport decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.time(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.fleets_before.add(Fleet.ADAPTER.decode(reader)); break;
          case 3: builder.fleets_after.add(Fleet.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CombatReport redact(CombatReport value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.fleets_before, Fleet.ADAPTER);
      Internal.redactElements(builder.fleets_after, Fleet.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
