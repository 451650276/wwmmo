// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: packets.proto at 32:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Requests that we want updates about all stars in sectors between (left,top) and (right,bottom)
 * inclusive. Sending a new WatchSectors packet will override your previous watched sectors. You
 * will immediately receive a StarUpdatedPacket with all of the stars in the sectors you've
 * requested.
 */
public final class WatchSectorsPacket extends Message<WatchSectorsPacket, WatchSectorsPacket.Builder> {
  public static final ProtoAdapter<WatchSectorsPacket> ADAPTER = new ProtoAdapter_WatchSectorsPacket();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_TOP = 0L;

  public static final Long DEFAULT_LEFT = 0L;

  public static final Long DEFAULT_RIGHT = 0L;

  public static final Long DEFAULT_BOTTOM = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long top;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long left;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long right;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long bottom;

  public WatchSectorsPacket(Long top, Long left, Long right, Long bottom) {
    this(top, left, right, bottom, ByteString.EMPTY);
  }

  public WatchSectorsPacket(Long top, Long left, Long right, Long bottom, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.top = top;
    this.left = left;
    this.right = right;
    this.bottom = bottom;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.top = top;
    builder.left = left;
    builder.right = right;
    builder.bottom = bottom;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof WatchSectorsPacket)) return false;
    WatchSectorsPacket o = (WatchSectorsPacket) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(top, o.top)
        && Internal.equals(left, o.left)
        && Internal.equals(right, o.right)
        && Internal.equals(bottom, o.bottom);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (top != null ? top.hashCode() : 0);
      result = result * 37 + (left != null ? left.hashCode() : 0);
      result = result * 37 + (right != null ? right.hashCode() : 0);
      result = result * 37 + (bottom != null ? bottom.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (top != null) builder.append(", top=").append(top);
    if (left != null) builder.append(", left=").append(left);
    if (right != null) builder.append(", right=").append(right);
    if (bottom != null) builder.append(", bottom=").append(bottom);
    return builder.replace(0, 2, "WatchSectorsPacket{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<WatchSectorsPacket, Builder> {
    public Long top;

    public Long left;

    public Long right;

    public Long bottom;

    public Builder() {
    }

    public Builder top(Long top) {
      this.top = top;
      return this;
    }

    public Builder left(Long left) {
      this.left = left;
      return this;
    }

    public Builder right(Long right) {
      this.right = right;
      return this;
    }

    public Builder bottom(Long bottom) {
      this.bottom = bottom;
      return this;
    }

    @Override
    public WatchSectorsPacket build() {
      return new WatchSectorsPacket(top, left, right, bottom, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_WatchSectorsPacket extends ProtoAdapter<WatchSectorsPacket> {
    ProtoAdapter_WatchSectorsPacket() {
      super(FieldEncoding.LENGTH_DELIMITED, WatchSectorsPacket.class);
    }

    @Override
    public int encodedSize(WatchSectorsPacket value) {
      return (value.top != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.top) : 0)
          + (value.left != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.left) : 0)
          + (value.right != null ? ProtoAdapter.INT64.encodedSizeWithTag(3, value.right) : 0)
          + (value.bottom != null ? ProtoAdapter.INT64.encodedSizeWithTag(4, value.bottom) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, WatchSectorsPacket value) throws IOException {
      if (value.top != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.top);
      if (value.left != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.left);
      if (value.right != null) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.right);
      if (value.bottom != null) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.bottom);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public WatchSectorsPacket decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.top(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.left(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.right(ProtoAdapter.INT64.decode(reader)); break;
          case 4: builder.bottom(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public WatchSectorsPacket redact(WatchSectorsPacket value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
