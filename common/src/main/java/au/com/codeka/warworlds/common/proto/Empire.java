// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: empire.proto at 26:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Contains details about an empire. Their "display" name, race (I guess?), display colour
 * and stuff like that.
 */
public final class Empire extends Message<Empire, Empire.Builder> {
  public static final ProtoAdapter<Empire> ADAPTER = new ProtoAdapter_Empire();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_DISPLAY_NAME = "";

  public static final EmpireState DEFAULT_STATE = EmpireState.ACTIVE;

  public static final Long DEFAULT_SHIELD_IMAGE_LAST_UPDATE = 0L;

  public static final Long DEFAULT_LAST_SEEN = 0L;

  /**
   * A unique identifier for the empire, useful for referencing him in other parts of the
   * system. This won't be present in the initial "PUT"
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long id;

  /**
   * The "display" name for the player, which is what other players see.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String display_name;

  @WireField(
      tag = 3,
      adapter = "au.com.codeka.warworlds.common.proto.Empire$EmpireState#ADAPTER"
  )
  public final EmpireState state;

  /**
   * if specified, contains the details of the empire's rank
   */
  @WireField(
      tag = 4,
      adapter = "au.com.codeka.warworlds.common.proto.EmpireRank#ADAPTER"
  )
  public final EmpireRank rank;

  /**
   * if specified, this is the empire's "home star", which is the star we should centre on when
   * we're asked to view the empire. It's usually the start that contains the HQ or, if they don't
   * have one, basically just a random star they control.
   */
  @WireField(
      tag = 5,
      adapter = "au.com.codeka.warworlds.common.proto.Star#ADAPTER"
  )
  public final Star home_star;

  /**
   * if this empire is part of an alliance, this will contain the details of the alliance.
   *  optional Alliance alliance = 6;
   * if set, this is the last date/time the empire's shield was updated (so we can detect if we
   * need to re-download it)
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long shield_image_last_update;

  /**
   * the time we last saw this empire.
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long last_seen;

  public Empire(Long id, String display_name, EmpireState state, EmpireRank rank, Star home_star, Long shield_image_last_update, Long last_seen) {
    this(id, display_name, state, rank, home_star, shield_image_last_update, last_seen, ByteString.EMPTY);
  }

  public Empire(Long id, String display_name, EmpireState state, EmpireRank rank, Star home_star, Long shield_image_last_update, Long last_seen, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.display_name = display_name;
    this.state = state;
    this.rank = rank;
    this.home_star = home_star;
    this.shield_image_last_update = shield_image_last_update;
    this.last_seen = last_seen;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.display_name = display_name;
    builder.state = state;
    builder.rank = rank;
    builder.home_star = home_star;
    builder.shield_image_last_update = shield_image_last_update;
    builder.last_seen = last_seen;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Empire)) return false;
    Empire o = (Empire) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(display_name, o.display_name)
        && Internal.equals(state, o.state)
        && Internal.equals(rank, o.rank)
        && Internal.equals(home_star, o.home_star)
        && Internal.equals(shield_image_last_update, o.shield_image_last_update)
        && Internal.equals(last_seen, o.last_seen);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (display_name != null ? display_name.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (rank != null ? rank.hashCode() : 0);
      result = result * 37 + (home_star != null ? home_star.hashCode() : 0);
      result = result * 37 + (shield_image_last_update != null ? shield_image_last_update.hashCode() : 0);
      result = result * 37 + (last_seen != null ? last_seen.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (display_name != null) builder.append(", display_name=").append(display_name);
    if (state != null) builder.append(", state=").append(state);
    if (rank != null) builder.append(", rank=").append(rank);
    if (home_star != null) builder.append(", home_star=").append(home_star);
    if (shield_image_last_update != null) builder.append(", shield_image_last_update=").append(shield_image_last_update);
    if (last_seen != null) builder.append(", last_seen=").append(last_seen);
    return builder.replace(0, 2, "Empire{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Empire, Builder> {
    public Long id;

    public String display_name;

    public EmpireState state;

    public EmpireRank rank;

    public Star home_star;

    public Long shield_image_last_update;

    public Long last_seen;

    public Builder() {
    }

    /**
     * A unique identifier for the empire, useful for referencing him in other parts of the
     * system. This won't be present in the initial "PUT"
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * The "display" name for the player, which is what other players see.
     */
    public Builder display_name(String display_name) {
      this.display_name = display_name;
      return this;
    }

    public Builder state(EmpireState state) {
      this.state = state;
      return this;
    }

    /**
     * if specified, contains the details of the empire's rank
     */
    public Builder rank(EmpireRank rank) {
      this.rank = rank;
      return this;
    }

    /**
     * if specified, this is the empire's "home star", which is the star we should centre on when
     * we're asked to view the empire. It's usually the start that contains the HQ or, if they don't
     * have one, basically just a random star they control.
     */
    public Builder home_star(Star home_star) {
      this.home_star = home_star;
      return this;
    }

    /**
     * if this empire is part of an alliance, this will contain the details of the alliance.
     *  optional Alliance alliance = 6;
     * if set, this is the last date/time the empire's shield was updated (so we can detect if we
     * need to re-download it)
     */
    public Builder shield_image_last_update(Long shield_image_last_update) {
      this.shield_image_last_update = shield_image_last_update;
      return this;
    }

    /**
     * the time we last saw this empire.
     */
    public Builder last_seen(Long last_seen) {
      this.last_seen = last_seen;
      return this;
    }

    @Override
    public Empire build() {
      return new Empire(id, display_name, state, rank, home_star, shield_image_last_update, last_seen, buildUnknownFields());
    }
  }

  public enum EmpireState implements WireEnum {
    ACTIVE(1),

    BANNED(2),

    ABANDONED(3);

    public static final ProtoAdapter<EmpireState> ADAPTER = ProtoAdapter.newEnumAdapter(EmpireState.class);

    private final int value;

    EmpireState(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static EmpireState fromValue(int value) {
      switch (value) {
        case 1: return ACTIVE;
        case 2: return BANNED;
        case 3: return ABANDONED;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_Empire extends ProtoAdapter<Empire> {
    ProtoAdapter_Empire() {
      super(FieldEncoding.LENGTH_DELIMITED, Empire.class);
    }

    @Override
    public int encodedSize(Empire value) {
      return (value.id != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.display_name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.display_name) : 0)
          + (value.state != null ? EmpireState.ADAPTER.encodedSizeWithTag(3, value.state) : 0)
          + (value.rank != null ? EmpireRank.ADAPTER.encodedSizeWithTag(4, value.rank) : 0)
          + (value.home_star != null ? Star.ADAPTER.encodedSizeWithTag(5, value.home_star) : 0)
          + (value.shield_image_last_update != null ? ProtoAdapter.INT64.encodedSizeWithTag(7, value.shield_image_last_update) : 0)
          + (value.last_seen != null ? ProtoAdapter.INT64.encodedSizeWithTag(8, value.last_seen) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Empire value) throws IOException {
      if (value.id != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id);
      if (value.display_name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.display_name);
      if (value.state != null) EmpireState.ADAPTER.encodeWithTag(writer, 3, value.state);
      if (value.rank != null) EmpireRank.ADAPTER.encodeWithTag(writer, 4, value.rank);
      if (value.home_star != null) Star.ADAPTER.encodeWithTag(writer, 5, value.home_star);
      if (value.shield_image_last_update != null) ProtoAdapter.INT64.encodeWithTag(writer, 7, value.shield_image_last_update);
      if (value.last_seen != null) ProtoAdapter.INT64.encodeWithTag(writer, 8, value.last_seen);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Empire decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.display_name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: {
            try {
              builder.state(EmpireState.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 4: builder.rank(EmpireRank.ADAPTER.decode(reader)); break;
          case 5: builder.home_star(Star.ADAPTER.decode(reader)); break;
          case 7: builder.shield_image_last_update(ProtoAdapter.INT64.decode(reader)); break;
          case 8: builder.last_seen(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Empire redact(Empire value) {
      Builder builder = value.newBuilder();
      if (builder.rank != null) builder.rank = EmpireRank.ADAPTER.redact(builder.rank);
      if (builder.home_star != null) builder.home_star = Star.ADAPTER.redact(builder.home_star);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
