// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: colony.proto at 47:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Represents a completed building in a colony.
 */
public final class Building extends Message<Building, Building.Builder> {
  public static final ProtoAdapter<Building> ADAPTER = new ProtoAdapter_Building();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_DESIGN_ID = "";

  public static final Integer DEFAULT_LEVEL = 0;

  public static final String DEFAULT_NOTES = "";

  /**
   * The name of the design of this building (defined in data/buildings.xml)
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String design_id;

  /**
   * The level of this building
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer level;

  /**
   * Not as useful for buildings (compared to fleets, say), but notes the player can attach.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String notes;

  public Building(String design_id, Integer level, String notes) {
    this(design_id, level, notes, ByteString.EMPTY);
  }

  public Building(String design_id, Integer level, String notes, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.design_id = design_id;
    this.level = level;
    this.notes = notes;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.design_id = design_id;
    builder.level = level;
    builder.notes = notes;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Building)) return false;
    Building o = (Building) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(design_id, o.design_id)
        && Internal.equals(level, o.level)
        && Internal.equals(notes, o.notes);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (design_id != null ? design_id.hashCode() : 0);
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (notes != null ? notes.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (design_id != null) builder.append(", design_id=").append(design_id);
    if (level != null) builder.append(", level=").append(level);
    if (notes != null) builder.append(", notes=").append(notes);
    return builder.replace(0, 2, "Building{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Building, Builder> {
    public String design_id;

    public Integer level;

    public String notes;

    public Builder() {
    }

    /**
     * The name of the design of this building (defined in data/buildings.xml)
     */
    public Builder design_id(String design_id) {
      this.design_id = design_id;
      return this;
    }

    /**
     * The level of this building
     */
    public Builder level(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * Not as useful for buildings (compared to fleets, say), but notes the player can attach.
     */
    public Builder notes(String notes) {
      this.notes = notes;
      return this;
    }

    @Override
    public Building build() {
      return new Building(design_id, level, notes, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Building extends ProtoAdapter<Building> {
    ProtoAdapter_Building() {
      super(FieldEncoding.LENGTH_DELIMITED, Building.class);
    }

    @Override
    public int encodedSize(Building value) {
      return (value.design_id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.design_id) : 0)
          + (value.level != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.level) : 0)
          + (value.notes != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.notes) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Building value) throws IOException {
      if (value.design_id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.design_id);
      if (value.level != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.level);
      if (value.notes != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.notes);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Building decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.design_id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.level(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.notes(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Building redact(Building value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
