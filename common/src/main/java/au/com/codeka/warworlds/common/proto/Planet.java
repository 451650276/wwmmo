// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: star.proto at 116:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Represents a planet in the star system. A planet orbits a Star which in turn belongs
 * to a Sector.
 */
public final class Planet extends Message<Planet, Planet.Builder> {
  public static final ProtoAdapter<Planet> ADAPTER = new ProtoAdapter_Planet();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_INDEX = 0;

  public static final PLANET_TYPE DEFAULT_PLANET_TYPE = PLANET_TYPE.GASGIANT;

  public static final Integer DEFAULT_SIZE = 0;

  public static final Integer DEFAULT_POPULATION_CONGENIALITY = 0;

  public static final Integer DEFAULT_FARMING_CONGENIALITY = 0;

  public static final Integer DEFAULT_MINING_CONGENIALITY = 0;

  public static final Integer DEFAULT_ENERGY_CONGENIALITY = 0;

  /**
   * The "index" of the planet represents how far it is from the sun. Planets are always
   * in monotonically increasing order of distance (0, 1, 2, 3, etc)
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer index;

  @WireField(
      tag = 3,
      adapter = "au.com.codeka.warworlds.common.proto.Planet$PLANET_TYPE#ADAPTER"
  )
  public final PLANET_TYPE planet_type;

  /**
   * The size of the planet. Certain planet_type's are predisposed to be certain sizes
   * (e.g. GASGIANT is predisposed to being big, etc) but planets will still vary in exact size.
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer size;

  /**
   * How "congenial" is this planet to supporting population
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer population_congeniality;

  /**
   * How "congenial" is this planet to supporting farming
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer farming_congeniality;

  /**
   * How "congenial" is this planet to supporting mining
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer mining_congeniality;

  /**
   * How "congenial" is this planet to the production of energy?
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer energy_congeniality;

  public Planet(Integer index, PLANET_TYPE planet_type, Integer size, Integer population_congeniality, Integer farming_congeniality, Integer mining_congeniality, Integer energy_congeniality) {
    this(index, planet_type, size, population_congeniality, farming_congeniality, mining_congeniality, energy_congeniality, ByteString.EMPTY);
  }

  public Planet(Integer index, PLANET_TYPE planet_type, Integer size, Integer population_congeniality, Integer farming_congeniality, Integer mining_congeniality, Integer energy_congeniality, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.index = index;
    this.planet_type = planet_type;
    this.size = size;
    this.population_congeniality = population_congeniality;
    this.farming_congeniality = farming_congeniality;
    this.mining_congeniality = mining_congeniality;
    this.energy_congeniality = energy_congeniality;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.index = index;
    builder.planet_type = planet_type;
    builder.size = size;
    builder.population_congeniality = population_congeniality;
    builder.farming_congeniality = farming_congeniality;
    builder.mining_congeniality = mining_congeniality;
    builder.energy_congeniality = energy_congeniality;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Planet)) return false;
    Planet o = (Planet) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(index, o.index)
        && Internal.equals(planet_type, o.planet_type)
        && Internal.equals(size, o.size)
        && Internal.equals(population_congeniality, o.population_congeniality)
        && Internal.equals(farming_congeniality, o.farming_congeniality)
        && Internal.equals(mining_congeniality, o.mining_congeniality)
        && Internal.equals(energy_congeniality, o.energy_congeniality);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (index != null ? index.hashCode() : 0);
      result = result * 37 + (planet_type != null ? planet_type.hashCode() : 0);
      result = result * 37 + (size != null ? size.hashCode() : 0);
      result = result * 37 + (population_congeniality != null ? population_congeniality.hashCode() : 0);
      result = result * 37 + (farming_congeniality != null ? farming_congeniality.hashCode() : 0);
      result = result * 37 + (mining_congeniality != null ? mining_congeniality.hashCode() : 0);
      result = result * 37 + (energy_congeniality != null ? energy_congeniality.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (index != null) builder.append(", index=").append(index);
    if (planet_type != null) builder.append(", planet_type=").append(planet_type);
    if (size != null) builder.append(", size=").append(size);
    if (population_congeniality != null) builder.append(", population_congeniality=").append(population_congeniality);
    if (farming_congeniality != null) builder.append(", farming_congeniality=").append(farming_congeniality);
    if (mining_congeniality != null) builder.append(", mining_congeniality=").append(mining_congeniality);
    if (energy_congeniality != null) builder.append(", energy_congeniality=").append(energy_congeniality);
    return builder.replace(0, 2, "Planet{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Planet, Builder> {
    public Integer index;

    public PLANET_TYPE planet_type;

    public Integer size;

    public Integer population_congeniality;

    public Integer farming_congeniality;

    public Integer mining_congeniality;

    public Integer energy_congeniality;

    public Builder() {
    }

    /**
     * The "index" of the planet represents how far it is from the sun. Planets are always
     * in monotonically increasing order of distance (0, 1, 2, 3, etc)
     */
    public Builder index(Integer index) {
      this.index = index;
      return this;
    }

    public Builder planet_type(PLANET_TYPE planet_type) {
      this.planet_type = planet_type;
      return this;
    }

    /**
     * The size of the planet. Certain planet_type's are predisposed to be certain sizes
     * (e.g. GASGIANT is predisposed to being big, etc) but planets will still vary in exact size.
     */
    public Builder size(Integer size) {
      this.size = size;
      return this;
    }

    /**
     * How "congenial" is this planet to supporting population
     */
    public Builder population_congeniality(Integer population_congeniality) {
      this.population_congeniality = population_congeniality;
      return this;
    }

    /**
     * How "congenial" is this planet to supporting farming
     */
    public Builder farming_congeniality(Integer farming_congeniality) {
      this.farming_congeniality = farming_congeniality;
      return this;
    }

    /**
     * How "congenial" is this planet to supporting mining
     */
    public Builder mining_congeniality(Integer mining_congeniality) {
      this.mining_congeniality = mining_congeniality;
      return this;
    }

    /**
     * How "congenial" is this planet to the production of energy?
     */
    public Builder energy_congeniality(Integer energy_congeniality) {
      this.energy_congeniality = energy_congeniality;
      return this;
    }

    @Override
    public Planet build() {
      return new Planet(index, planet_type, size, population_congeniality, farming_congeniality, mining_congeniality, energy_congeniality, buildUnknownFields());
    }
  }

  /**
   * The various different "kinds" of planets. Planets are spawned in increasing order
   * of probability (so "terran" is most likely, "gas giant" least likely).
   */
  public enum PLANET_TYPE implements WireEnum {
    GASGIANT(1),

    RADIATED(2),

    INFERNO(3),

    ASTEROIDS(4),

    WATER(5),

    TOXIC(6),

    DESERT(7),

    SWAMP(8),

    TERRAN(9);

    public static final ProtoAdapter<PLANET_TYPE> ADAPTER = ProtoAdapter.newEnumAdapter(PLANET_TYPE.class);

    private final int value;

    PLANET_TYPE(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static PLANET_TYPE fromValue(int value) {
      switch (value) {
        case 1: return GASGIANT;
        case 2: return RADIATED;
        case 3: return INFERNO;
        case 4: return ASTEROIDS;
        case 5: return WATER;
        case 6: return TOXIC;
        case 7: return DESERT;
        case 8: return SWAMP;
        case 9: return TERRAN;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_Planet extends ProtoAdapter<Planet> {
    ProtoAdapter_Planet() {
      super(FieldEncoding.LENGTH_DELIMITED, Planet.class);
    }

    @Override
    public int encodedSize(Planet value) {
      return (value.index != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.index) : 0)
          + (value.planet_type != null ? PLANET_TYPE.ADAPTER.encodedSizeWithTag(3, value.planet_type) : 0)
          + (value.size != null ? ProtoAdapter.INT32.encodedSizeWithTag(4, value.size) : 0)
          + (value.population_congeniality != null ? ProtoAdapter.INT32.encodedSizeWithTag(5, value.population_congeniality) : 0)
          + (value.farming_congeniality != null ? ProtoAdapter.INT32.encodedSizeWithTag(6, value.farming_congeniality) : 0)
          + (value.mining_congeniality != null ? ProtoAdapter.INT32.encodedSizeWithTag(7, value.mining_congeniality) : 0)
          + (value.energy_congeniality != null ? ProtoAdapter.INT32.encodedSizeWithTag(8, value.energy_congeniality) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Planet value) throws IOException {
      if (value.index != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.index);
      if (value.planet_type != null) PLANET_TYPE.ADAPTER.encodeWithTag(writer, 3, value.planet_type);
      if (value.size != null) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.size);
      if (value.population_congeniality != null) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.population_congeniality);
      if (value.farming_congeniality != null) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.farming_congeniality);
      if (value.mining_congeniality != null) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.mining_congeniality);
      if (value.energy_congeniality != null) ProtoAdapter.INT32.encodeWithTag(writer, 8, value.energy_congeniality);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Planet decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 2: builder.index(ProtoAdapter.INT32.decode(reader)); break;
          case 3: {
            try {
              builder.planet_type(PLANET_TYPE.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 4: builder.size(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.population_congeniality(ProtoAdapter.INT32.decode(reader)); break;
          case 6: builder.farming_congeniality(ProtoAdapter.INT32.decode(reader)); break;
          case 7: builder.mining_congeniality(ProtoAdapter.INT32.decode(reader)); break;
          case 8: builder.energy_congeniality(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Planet redact(Planet value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
