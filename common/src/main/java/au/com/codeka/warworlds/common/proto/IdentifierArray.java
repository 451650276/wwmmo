// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: common.proto at 21:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * An array of identifiers.
 */
public final class IdentifierArray extends Message<IdentifierArray, IdentifierArray.Builder> {
  public static final ProtoAdapter<IdentifierArray> ADAPTER = new ProtoAdapter_IdentifierArray();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> ids;

  public IdentifierArray(List<Long> ids) {
    this(ids, ByteString.EMPTY);
  }

  public IdentifierArray(List<Long> ids, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.ids = Internal.immutableCopyOf("ids", ids);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ids = Internal.copyOf("ids", ids);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof IdentifierArray)) return false;
    IdentifierArray o = (IdentifierArray) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(ids, o.ids);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (ids != null ? ids.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (ids != null) builder.append(", ids=").append(ids);
    return builder.replace(0, 2, "IdentifierArray{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<IdentifierArray, Builder> {
    public List<Long> ids;

    public Builder() {
      ids = Internal.newMutableList();
    }

    public Builder ids(List<Long> ids) {
      Internal.checkElementsNotNull(ids);
      this.ids = ids;
      return this;
    }

    @Override
    public IdentifierArray build() {
      return new IdentifierArray(ids, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_IdentifierArray extends ProtoAdapter<IdentifierArray> {
    ProtoAdapter_IdentifierArray() {
      super(FieldEncoding.LENGTH_DELIMITED, IdentifierArray.class);
    }

    @Override
    public int encodedSize(IdentifierArray value) {
      return ProtoAdapter.INT64.asRepeated().encodedSizeWithTag(1, value.ids)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, IdentifierArray value) throws IOException {
      if (value.ids != null) ProtoAdapter.INT64.asRepeated().encodeWithTag(writer, 1, value.ids);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public IdentifierArray decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.ids.add(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public IdentifierArray redact(IdentifierArray value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
