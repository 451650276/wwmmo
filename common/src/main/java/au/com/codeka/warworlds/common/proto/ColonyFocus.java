// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: colony.proto at 42:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Float;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * The "focus" of the colony. The values here should all add up to 1.0.
 */
public final class ColonyFocus extends Message<ColonyFocus, ColonyFocus.Builder> {
  public static final ProtoAdapter<ColonyFocus> ADAPTER = new ProtoAdapter_ColonyFocus();

  private static final long serialVersionUID = 0L;

  public static final Float DEFAULT_POPULATION = 0.0f;

  public static final Float DEFAULT_FARMING = 0.0f;

  public static final Float DEFAULT_MINING = 0.0f;

  public static final Float DEFAULT_CONSTRUCTION = 0.0f;

  public static final Float DEFAULT_ENERGY = 0.0f;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float population;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float farming;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float mining;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float construction;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float energy;

  public ColonyFocus(Float population, Float farming, Float mining, Float construction, Float energy) {
    this(population, farming, mining, construction, energy, ByteString.EMPTY);
  }

  public ColonyFocus(Float population, Float farming, Float mining, Float construction, Float energy, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.population = population;
    this.farming = farming;
    this.mining = mining;
    this.construction = construction;
    this.energy = energy;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.population = population;
    builder.farming = farming;
    builder.mining = mining;
    builder.construction = construction;
    builder.energy = energy;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ColonyFocus)) return false;
    ColonyFocus o = (ColonyFocus) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(population, o.population)
        && Internal.equals(farming, o.farming)
        && Internal.equals(mining, o.mining)
        && Internal.equals(construction, o.construction)
        && Internal.equals(energy, o.energy);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (population != null ? population.hashCode() : 0);
      result = result * 37 + (farming != null ? farming.hashCode() : 0);
      result = result * 37 + (mining != null ? mining.hashCode() : 0);
      result = result * 37 + (construction != null ? construction.hashCode() : 0);
      result = result * 37 + (energy != null ? energy.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (population != null) builder.append(", population=").append(population);
    if (farming != null) builder.append(", farming=").append(farming);
    if (mining != null) builder.append(", mining=").append(mining);
    if (construction != null) builder.append(", construction=").append(construction);
    if (energy != null) builder.append(", energy=").append(energy);
    return builder.replace(0, 2, "ColonyFocus{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ColonyFocus, Builder> {
    public Float population;

    public Float farming;

    public Float mining;

    public Float construction;

    public Float energy;

    public Builder() {
    }

    public Builder population(Float population) {
      this.population = population;
      return this;
    }

    public Builder farming(Float farming) {
      this.farming = farming;
      return this;
    }

    public Builder mining(Float mining) {
      this.mining = mining;
      return this;
    }

    public Builder construction(Float construction) {
      this.construction = construction;
      return this;
    }

    public Builder energy(Float energy) {
      this.energy = energy;
      return this;
    }

    @Override
    public ColonyFocus build() {
      return new ColonyFocus(population, farming, mining, construction, energy, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ColonyFocus extends ProtoAdapter<ColonyFocus> {
    ProtoAdapter_ColonyFocus() {
      super(FieldEncoding.LENGTH_DELIMITED, ColonyFocus.class);
    }

    @Override
    public int encodedSize(ColonyFocus value) {
      return (value.population != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(4, value.population) : 0)
          + (value.farming != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(5, value.farming) : 0)
          + (value.mining != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(6, value.mining) : 0)
          + (value.construction != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(7, value.construction) : 0)
          + (value.energy != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(8, value.energy) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ColonyFocus value) throws IOException {
      if (value.population != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 4, value.population);
      if (value.farming != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 5, value.farming);
      if (value.mining != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 6, value.mining);
      if (value.construction != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 7, value.construction);
      if (value.energy != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 8, value.energy);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ColonyFocus decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 4: builder.population(ProtoAdapter.FLOAT.decode(reader)); break;
          case 5: builder.farming(ProtoAdapter.FLOAT.decode(reader)); break;
          case 6: builder.mining(ProtoAdapter.FLOAT.decode(reader)); break;
          case 7: builder.construction(ProtoAdapter.FLOAT.decode(reader)); break;
          case 8: builder.energy(ProtoAdapter.FLOAT.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ColonyFocus redact(ColonyFocus value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
