// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: design.proto at 5:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Design extends Message<Design, Design.Builder> {
  public static final ProtoAdapter<Design> ADAPTER = new ProtoAdapter_Design();

  private static final long serialVersionUID = 0L;

  public static final DesignType DEFAULT_TYPE = DesignType.UNKNOWN_DESIGN;

  public static final String DEFAULT_DISPLAY_NAME = "";

  public static final String DEFAULT_DESCRIPTION = "";

  public static final String DEFAULT_IMAGE_URL = "";

  public static final DesignKind DEFAULT_DESIGN_KIND = DesignKind.UNKNOWN_KIND;

  public static final Integer DEFAULT_MAX_PER_COLONY = 0;

  public static final Integer DEFAULT_MAX_PER_EMPIRE = 0;

  public static final Boolean DEFAULT_SHOW_IN_SOLAR_SYSTEM = false;

  public static final Float DEFAULT_SPEED_PX_PER_HOUR = 0.0f;

  public static final Float DEFAULT_FUEL_COST_PER_PX = 0.0f;

  public static final Float DEFAULT_BASE_ATTACK = 0.0f;

  public static final Float DEFAULT_BASE_DEFENCE = 0.0f;

  public static final Integer DEFAULT_COMBAT_PRIORITY = 0;

  @WireField(
      tag = 1,
      adapter = "au.com.codeka.warworlds.common.proto.Design$DesignType#ADAPTER"
  )
  public final DesignType type;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String display_name;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String description;

  @WireField(
      tag = 4,
      adapter = "au.com.codeka.warworlds.common.proto.Design$BuildCost#ADAPTER"
  )
  public final BuildCost build_cost;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String image_url;

  @WireField(
      tag = 6,
      adapter = "au.com.codeka.warworlds.common.proto.Design$DesignKind#ADAPTER"
  )
  public final DesignKind design_kind;

  @WireField(
      tag = 7,
      adapter = "au.com.codeka.warworlds.common.proto.Design$Dependency#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Dependency> dependencies;

  @WireField(
      tag = 8,
      adapter = "au.com.codeka.warworlds.common.proto.Design$Effect#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Effect> effect;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer max_per_colony;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer max_per_empire;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean show_in_solar_system;

  @WireField(
      tag = 12,
      adapter = "au.com.codeka.warworlds.common.proto.Design$Upgrade#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Upgrade> upgrades;

  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float speed_px_per_hour;

  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float fuel_cost_per_px;

  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float base_attack;

  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float base_defence;

  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer combat_priority;

  public Design(DesignType type, String display_name, String description, BuildCost build_cost, String image_url, DesignKind design_kind, List<Dependency> dependencies, List<Effect> effect, Integer max_per_colony, Integer max_per_empire, Boolean show_in_solar_system, List<Upgrade> upgrades, Float speed_px_per_hour, Float fuel_cost_per_px, Float base_attack, Float base_defence, Integer combat_priority) {
    this(type, display_name, description, build_cost, image_url, design_kind, dependencies, effect, max_per_colony, max_per_empire, show_in_solar_system, upgrades, speed_px_per_hour, fuel_cost_per_px, base_attack, base_defence, combat_priority, ByteString.EMPTY);
  }

  public Design(DesignType type, String display_name, String description, BuildCost build_cost, String image_url, DesignKind design_kind, List<Dependency> dependencies, List<Effect> effect, Integer max_per_colony, Integer max_per_empire, Boolean show_in_solar_system, List<Upgrade> upgrades, Float speed_px_per_hour, Float fuel_cost_per_px, Float base_attack, Float base_defence, Integer combat_priority, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.display_name = display_name;
    this.description = description;
    this.build_cost = build_cost;
    this.image_url = image_url;
    this.design_kind = design_kind;
    this.dependencies = Internal.immutableCopyOf("dependencies", dependencies);
    this.effect = Internal.immutableCopyOf("effect", effect);
    this.max_per_colony = max_per_colony;
    this.max_per_empire = max_per_empire;
    this.show_in_solar_system = show_in_solar_system;
    this.upgrades = Internal.immutableCopyOf("upgrades", upgrades);
    this.speed_px_per_hour = speed_px_per_hour;
    this.fuel_cost_per_px = fuel_cost_per_px;
    this.base_attack = base_attack;
    this.base_defence = base_defence;
    this.combat_priority = combat_priority;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.display_name = display_name;
    builder.description = description;
    builder.build_cost = build_cost;
    builder.image_url = image_url;
    builder.design_kind = design_kind;
    builder.dependencies = Internal.copyOf("dependencies", dependencies);
    builder.effect = Internal.copyOf("effect", effect);
    builder.max_per_colony = max_per_colony;
    builder.max_per_empire = max_per_empire;
    builder.show_in_solar_system = show_in_solar_system;
    builder.upgrades = Internal.copyOf("upgrades", upgrades);
    builder.speed_px_per_hour = speed_px_per_hour;
    builder.fuel_cost_per_px = fuel_cost_per_px;
    builder.base_attack = base_attack;
    builder.base_defence = base_defence;
    builder.combat_priority = combat_priority;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Design)) return false;
    Design o = (Design) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(display_name, o.display_name)
        && Internal.equals(description, o.description)
        && Internal.equals(build_cost, o.build_cost)
        && Internal.equals(image_url, o.image_url)
        && Internal.equals(design_kind, o.design_kind)
        && Internal.equals(dependencies, o.dependencies)
        && Internal.equals(effect, o.effect)
        && Internal.equals(max_per_colony, o.max_per_colony)
        && Internal.equals(max_per_empire, o.max_per_empire)
        && Internal.equals(show_in_solar_system, o.show_in_solar_system)
        && Internal.equals(upgrades, o.upgrades)
        && Internal.equals(speed_px_per_hour, o.speed_px_per_hour)
        && Internal.equals(fuel_cost_per_px, o.fuel_cost_per_px)
        && Internal.equals(base_attack, o.base_attack)
        && Internal.equals(base_defence, o.base_defence)
        && Internal.equals(combat_priority, o.combat_priority);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (display_name != null ? display_name.hashCode() : 0);
      result = result * 37 + (description != null ? description.hashCode() : 0);
      result = result * 37 + (build_cost != null ? build_cost.hashCode() : 0);
      result = result * 37 + (image_url != null ? image_url.hashCode() : 0);
      result = result * 37 + (design_kind != null ? design_kind.hashCode() : 0);
      result = result * 37 + (dependencies != null ? dependencies.hashCode() : 1);
      result = result * 37 + (effect != null ? effect.hashCode() : 1);
      result = result * 37 + (max_per_colony != null ? max_per_colony.hashCode() : 0);
      result = result * 37 + (max_per_empire != null ? max_per_empire.hashCode() : 0);
      result = result * 37 + (show_in_solar_system != null ? show_in_solar_system.hashCode() : 0);
      result = result * 37 + (upgrades != null ? upgrades.hashCode() : 1);
      result = result * 37 + (speed_px_per_hour != null ? speed_px_per_hour.hashCode() : 0);
      result = result * 37 + (fuel_cost_per_px != null ? fuel_cost_per_px.hashCode() : 0);
      result = result * 37 + (base_attack != null ? base_attack.hashCode() : 0);
      result = result * 37 + (base_defence != null ? base_defence.hashCode() : 0);
      result = result * 37 + (combat_priority != null ? combat_priority.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (display_name != null) builder.append(", display_name=").append(display_name);
    if (description != null) builder.append(", description=").append(description);
    if (build_cost != null) builder.append(", build_cost=").append(build_cost);
    if (image_url != null) builder.append(", image_url=").append(image_url);
    if (design_kind != null) builder.append(", design_kind=").append(design_kind);
    if (dependencies != null) builder.append(", dependencies=").append(dependencies);
    if (effect != null) builder.append(", effect=").append(effect);
    if (max_per_colony != null) builder.append(", max_per_colony=").append(max_per_colony);
    if (max_per_empire != null) builder.append(", max_per_empire=").append(max_per_empire);
    if (show_in_solar_system != null) builder.append(", show_in_solar_system=").append(show_in_solar_system);
    if (upgrades != null) builder.append(", upgrades=").append(upgrades);
    if (speed_px_per_hour != null) builder.append(", speed_px_per_hour=").append(speed_px_per_hour);
    if (fuel_cost_per_px != null) builder.append(", fuel_cost_per_px=").append(fuel_cost_per_px);
    if (base_attack != null) builder.append(", base_attack=").append(base_attack);
    if (base_defence != null) builder.append(", base_defence=").append(base_defence);
    if (combat_priority != null) builder.append(", combat_priority=").append(combat_priority);
    return builder.replace(0, 2, "Design{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Design, Builder> {
    public DesignType type;

    public String display_name;

    public String description;

    public BuildCost build_cost;

    public String image_url;

    public DesignKind design_kind;

    public List<Dependency> dependencies;

    public List<Effect> effect;

    public Integer max_per_colony;

    public Integer max_per_empire;

    public Boolean show_in_solar_system;

    public List<Upgrade> upgrades;

    public Float speed_px_per_hour;

    public Float fuel_cost_per_px;

    public Float base_attack;

    public Float base_defence;

    public Integer combat_priority;

    public Builder() {
      dependencies = Internal.newMutableList();
      effect = Internal.newMutableList();
      upgrades = Internal.newMutableList();
    }

    public Builder type(DesignType type) {
      this.type = type;
      return this;
    }

    public Builder display_name(String display_name) {
      this.display_name = display_name;
      return this;
    }

    public Builder description(String description) {
      this.description = description;
      return this;
    }

    public Builder build_cost(BuildCost build_cost) {
      this.build_cost = build_cost;
      return this;
    }

    public Builder image_url(String image_url) {
      this.image_url = image_url;
      return this;
    }

    public Builder design_kind(DesignKind design_kind) {
      this.design_kind = design_kind;
      return this;
    }

    public Builder dependencies(List<Dependency> dependencies) {
      Internal.checkElementsNotNull(dependencies);
      this.dependencies = dependencies;
      return this;
    }

    public Builder effect(List<Effect> effect) {
      Internal.checkElementsNotNull(effect);
      this.effect = effect;
      return this;
    }

    public Builder max_per_colony(Integer max_per_colony) {
      this.max_per_colony = max_per_colony;
      return this;
    }

    public Builder max_per_empire(Integer max_per_empire) {
      this.max_per_empire = max_per_empire;
      return this;
    }

    public Builder show_in_solar_system(Boolean show_in_solar_system) {
      this.show_in_solar_system = show_in_solar_system;
      return this;
    }

    public Builder upgrades(List<Upgrade> upgrades) {
      Internal.checkElementsNotNull(upgrades);
      this.upgrades = upgrades;
      return this;
    }

    public Builder speed_px_per_hour(Float speed_px_per_hour) {
      this.speed_px_per_hour = speed_px_per_hour;
      return this;
    }

    public Builder fuel_cost_per_px(Float fuel_cost_per_px) {
      this.fuel_cost_per_px = fuel_cost_per_px;
      return this;
    }

    public Builder base_attack(Float base_attack) {
      this.base_attack = base_attack;
      return this;
    }

    public Builder base_defence(Float base_defence) {
      this.base_defence = base_defence;
      return this;
    }

    public Builder combat_priority(Integer combat_priority) {
      this.combat_priority = combat_priority;
      return this;
    }

    @Override
    public Design build() {
      return new Design(type, display_name, description, build_cost, image_url, design_kind, dependencies, effect, max_per_colony, max_per_empire, show_in_solar_system, upgrades, speed_px_per_hour, fuel_cost_per_px, base_attack, base_defence, combat_priority, buildUnknownFields());
    }
  }

  public enum DesignType implements WireEnum {
    UNKNOWN_DESIGN(0),

    COLONY_SHIP(1),

    SCOUT(2),

    FIGHTER(3),

    TROOP_CARRIER(4),

    WORMHOLE_GENERATOR(5),

    SHIPYARD(101),

    SILO(102),

    RESEARCH(103),

    GROUND_SHIELD(104),

    BIOSPHERE(105),

    HQ(106),

    RADAR(107),

    WORMHOLE_DISRUPTOR(108);

    public static final ProtoAdapter<DesignType> ADAPTER = ProtoAdapter.newEnumAdapter(DesignType.class);

    private final int value;

    DesignType(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static DesignType fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN_DESIGN;
        case 1: return COLONY_SHIP;
        case 2: return SCOUT;
        case 3: return FIGHTER;
        case 4: return TROOP_CARRIER;
        case 5: return WORMHOLE_GENERATOR;
        case 101: return SHIPYARD;
        case 102: return SILO;
        case 103: return RESEARCH;
        case 104: return GROUND_SHIELD;
        case 105: return BIOSPHERE;
        case 106: return HQ;
        case 107: return RADAR;
        case 108: return WORMHOLE_DISRUPTOR;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public static final class BuildCost extends Message<BuildCost, BuildCost.Builder> {
    public static final ProtoAdapter<BuildCost> ADAPTER = new ProtoAdapter_BuildCost();

    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_MINERALS = 0;

    public static final Integer DEFAULT_POPULATION = 0;

    public static final Integer DEFAULT_MAX_COUNT = 0;

    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer minerals;

    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer population;

    @WireField(
        tag = 3,
        adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer max_count;

    public BuildCost(Integer minerals, Integer population, Integer max_count) {
      this(minerals, population, max_count, ByteString.EMPTY);
    }

    public BuildCost(Integer minerals, Integer population, Integer max_count, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.minerals = minerals;
      this.population = population;
      this.max_count = max_count;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.minerals = minerals;
      builder.population = population;
      builder.max_count = max_count;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof BuildCost)) return false;
      BuildCost o = (BuildCost) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(minerals, o.minerals)
          && Internal.equals(population, o.population)
          && Internal.equals(max_count, o.max_count);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (minerals != null ? minerals.hashCode() : 0);
        result = result * 37 + (population != null ? population.hashCode() : 0);
        result = result * 37 + (max_count != null ? max_count.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (minerals != null) builder.append(", minerals=").append(minerals);
      if (population != null) builder.append(", population=").append(population);
      if (max_count != null) builder.append(", max_count=").append(max_count);
      return builder.replace(0, 2, "BuildCost{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<BuildCost, Builder> {
      public Integer minerals;

      public Integer population;

      public Integer max_count;

      public Builder() {
      }

      public Builder minerals(Integer minerals) {
        this.minerals = minerals;
        return this;
      }

      public Builder population(Integer population) {
        this.population = population;
        return this;
      }

      public Builder max_count(Integer max_count) {
        this.max_count = max_count;
        return this;
      }

      @Override
      public BuildCost build() {
        return new BuildCost(minerals, population, max_count, buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_BuildCost extends ProtoAdapter<BuildCost> {
      ProtoAdapter_BuildCost() {
        super(FieldEncoding.LENGTH_DELIMITED, BuildCost.class);
      }

      @Override
      public int encodedSize(BuildCost value) {
        return (value.minerals != null ? ProtoAdapter.INT32.encodedSizeWithTag(1, value.minerals) : 0)
            + (value.population != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.population) : 0)
            + (value.max_count != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.max_count) : 0)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, BuildCost value) throws IOException {
        if (value.minerals != null) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.minerals);
        if (value.population != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.population);
        if (value.max_count != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.max_count);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public BuildCost decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.minerals(ProtoAdapter.INT32.decode(reader)); break;
            case 2: builder.population(ProtoAdapter.INT32.decode(reader)); break;
            case 3: builder.max_count(ProtoAdapter.INT32.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public BuildCost redact(BuildCost value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  public enum DesignKind implements WireEnum {
    UNKNOWN_KIND(0),

    BUILDING(1),

    SHIP(2);

    public static final ProtoAdapter<DesignKind> ADAPTER = ProtoAdapter.newEnumAdapter(DesignKind.class);

    private final int value;

    DesignKind(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static DesignKind fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN_KIND;
        case 1: return BUILDING;
        case 2: return SHIP;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public static final class Dependency extends Message<Dependency, Dependency.Builder> {
    public static final ProtoAdapter<Dependency> ADAPTER = new ProtoAdapter_Dependency();

    private static final long serialVersionUID = 0L;

    public static final DesignType DEFAULT_TYPE = DesignType.UNKNOWN_DESIGN;

    public static final Integer DEFAULT_LEVEL = 0;

    @WireField(
        tag = 1,
        adapter = "au.com.codeka.warworlds.common.proto.Design$DesignType#ADAPTER"
    )
    public final DesignType type;

    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer level;

    public Dependency(DesignType type, Integer level) {
      this(type, level, ByteString.EMPTY);
    }

    public Dependency(DesignType type, Integer level, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.type = type;
      this.level = level;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.type = type;
      builder.level = level;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Dependency)) return false;
      Dependency o = (Dependency) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(type, o.type)
          && Internal.equals(level, o.level);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (type != null ? type.hashCode() : 0);
        result = result * 37 + (level != null ? level.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (type != null) builder.append(", type=").append(type);
      if (level != null) builder.append(", level=").append(level);
      return builder.replace(0, 2, "Dependency{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Dependency, Builder> {
      public DesignType type;

      public Integer level;

      public Builder() {
      }

      public Builder type(DesignType type) {
        this.type = type;
        return this;
      }

      public Builder level(Integer level) {
        this.level = level;
        return this;
      }

      @Override
      public Dependency build() {
        return new Dependency(type, level, buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_Dependency extends ProtoAdapter<Dependency> {
      ProtoAdapter_Dependency() {
        super(FieldEncoding.LENGTH_DELIMITED, Dependency.class);
      }

      @Override
      public int encodedSize(Dependency value) {
        return (value.type != null ? DesignType.ADAPTER.encodedSizeWithTag(1, value.type) : 0)
            + (value.level != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.level) : 0)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Dependency value) throws IOException {
        if (value.type != null) DesignType.ADAPTER.encodeWithTag(writer, 1, value.type);
        if (value.level != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.level);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Dependency decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: {
              try {
                builder.type(DesignType.ADAPTER.decode(reader));
              } catch (ProtoAdapter.EnumConstantNotFoundException e) {
                builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
              }
              break;
            }
            case 2: builder.level(ProtoAdapter.INT32.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Dependency redact(Dependency value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  public enum EffectType implements WireEnum {
    UNKNOWN_EFFECT(0),

    FIGHTER_SHIP(1),

    SCOUT_SHIP(2),

    EMPTY_SPACE_MOVER(4),

    STORAGE(101),

    DEFENCE(102),

    POPULATION_BOOST(103),

    RADAR_SCAN(104),

    WORMHOLE_DISRUPT(105),

    RADAR_ALERT(106);

    public static final ProtoAdapter<EffectType> ADAPTER = ProtoAdapter.newEnumAdapter(EffectType.class);

    private final int value;

    EffectType(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static EffectType fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN_EFFECT;
        case 1: return FIGHTER_SHIP;
        case 2: return SCOUT_SHIP;
        case 4: return EMPTY_SPACE_MOVER;
        case 101: return STORAGE;
        case 102: return DEFENCE;
        case 103: return POPULATION_BOOST;
        case 104: return RADAR_SCAN;
        case 105: return WORMHOLE_DISRUPT;
        case 106: return RADAR_ALERT;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public static final class Effect extends Message<Effect, Effect.Builder> {
    public static final ProtoAdapter<Effect> ADAPTER = new ProtoAdapter_Effect();

    private static final long serialVersionUID = 0L;

    public static final EffectType DEFAULT_TYPE = EffectType.UNKNOWN_EFFECT;

    public static final Float DEFAULT_RANGE = 0.0f;

    public static final Integer DEFAULT_GOODS = 0;

    public static final Integer DEFAULT_MINERALS = 0;

    public static final Integer DEFAULT_ENERGY = 0;

    public static final Float DEFAULT_BONUS = 0.0f;

    public static final Integer DEFAULT_MINIMUM = 0;

    @WireField(
        tag = 1,
        adapter = "au.com.codeka.warworlds.common.proto.Design$EffectType#ADAPTER"
    )
    public final EffectType type;

    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float range;

    @WireField(
        tag = 3,
        adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer goods;

    @WireField(
        tag = 4,
        adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer minerals;

    @WireField(
        tag = 5,
        adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer energy;

    @WireField(
        tag = 6,
        adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
    )
    public final Float bonus;

    @WireField(
        tag = 7,
        adapter = "com.squareup.wire.ProtoAdapter#INT32"
    )
    public final Integer minimum;

    public Effect(EffectType type, Float range, Integer goods, Integer minerals, Integer energy, Float bonus, Integer minimum) {
      this(type, range, goods, minerals, energy, bonus, minimum, ByteString.EMPTY);
    }

    public Effect(EffectType type, Float range, Integer goods, Integer minerals, Integer energy, Float bonus, Integer minimum, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.type = type;
      this.range = range;
      this.goods = goods;
      this.minerals = minerals;
      this.energy = energy;
      this.bonus = bonus;
      this.minimum = minimum;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.type = type;
      builder.range = range;
      builder.goods = goods;
      builder.minerals = minerals;
      builder.energy = energy;
      builder.bonus = bonus;
      builder.minimum = minimum;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Effect)) return false;
      Effect o = (Effect) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(type, o.type)
          && Internal.equals(range, o.range)
          && Internal.equals(goods, o.goods)
          && Internal.equals(minerals, o.minerals)
          && Internal.equals(energy, o.energy)
          && Internal.equals(bonus, o.bonus)
          && Internal.equals(minimum, o.minimum);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (type != null ? type.hashCode() : 0);
        result = result * 37 + (range != null ? range.hashCode() : 0);
        result = result * 37 + (goods != null ? goods.hashCode() : 0);
        result = result * 37 + (minerals != null ? minerals.hashCode() : 0);
        result = result * 37 + (energy != null ? energy.hashCode() : 0);
        result = result * 37 + (bonus != null ? bonus.hashCode() : 0);
        result = result * 37 + (minimum != null ? minimum.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (type != null) builder.append(", type=").append(type);
      if (range != null) builder.append(", range=").append(range);
      if (goods != null) builder.append(", goods=").append(goods);
      if (minerals != null) builder.append(", minerals=").append(minerals);
      if (energy != null) builder.append(", energy=").append(energy);
      if (bonus != null) builder.append(", bonus=").append(bonus);
      if (minimum != null) builder.append(", minimum=").append(minimum);
      return builder.replace(0, 2, "Effect{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Effect, Builder> {
      public EffectType type;

      public Float range;

      public Integer goods;

      public Integer minerals;

      public Integer energy;

      public Float bonus;

      public Integer minimum;

      public Builder() {
      }

      public Builder type(EffectType type) {
        this.type = type;
        return this;
      }

      public Builder range(Float range) {
        this.range = range;
        return this;
      }

      public Builder goods(Integer goods) {
        this.goods = goods;
        return this;
      }

      public Builder minerals(Integer minerals) {
        this.minerals = minerals;
        return this;
      }

      public Builder energy(Integer energy) {
        this.energy = energy;
        return this;
      }

      public Builder bonus(Float bonus) {
        this.bonus = bonus;
        return this;
      }

      public Builder minimum(Integer minimum) {
        this.minimum = minimum;
        return this;
      }

      @Override
      public Effect build() {
        return new Effect(type, range, goods, minerals, energy, bonus, minimum, buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_Effect extends ProtoAdapter<Effect> {
      ProtoAdapter_Effect() {
        super(FieldEncoding.LENGTH_DELIMITED, Effect.class);
      }

      @Override
      public int encodedSize(Effect value) {
        return (value.type != null ? EffectType.ADAPTER.encodedSizeWithTag(1, value.type) : 0)
            + (value.range != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.range) : 0)
            + (value.goods != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.goods) : 0)
            + (value.minerals != null ? ProtoAdapter.INT32.encodedSizeWithTag(4, value.minerals) : 0)
            + (value.energy != null ? ProtoAdapter.INT32.encodedSizeWithTag(5, value.energy) : 0)
            + (value.bonus != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(6, value.bonus) : 0)
            + (value.minimum != null ? ProtoAdapter.INT32.encodedSizeWithTag(7, value.minimum) : 0)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Effect value) throws IOException {
        if (value.type != null) EffectType.ADAPTER.encodeWithTag(writer, 1, value.type);
        if (value.range != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.range);
        if (value.goods != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.goods);
        if (value.minerals != null) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.minerals);
        if (value.energy != null) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.energy);
        if (value.bonus != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 6, value.bonus);
        if (value.minimum != null) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.minimum);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Effect decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: {
              try {
                builder.type(EffectType.ADAPTER.decode(reader));
              } catch (ProtoAdapter.EnumConstantNotFoundException e) {
                builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
              }
              break;
            }
            case 2: builder.range(ProtoAdapter.FLOAT.decode(reader)); break;
            case 3: builder.goods(ProtoAdapter.INT32.decode(reader)); break;
            case 4: builder.minerals(ProtoAdapter.INT32.decode(reader)); break;
            case 5: builder.energy(ProtoAdapter.INT32.decode(reader)); break;
            case 6: builder.bonus(ProtoAdapter.FLOAT.decode(reader)); break;
            case 7: builder.minimum(ProtoAdapter.INT32.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Effect redact(Effect value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  public enum UpgradeType implements WireEnum {
    UNKNOWN_UPGRADE(0),

    CLOAK(1),

    BOOST(2),

    CRYOGENICS(3);

    public static final ProtoAdapter<UpgradeType> ADAPTER = ProtoAdapter.newEnumAdapter(UpgradeType.class);

    private final int value;

    UpgradeType(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static UpgradeType fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN_UPGRADE;
        case 1: return CLOAK;
        case 2: return BOOST;
        case 3: return CRYOGENICS;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public static final class Upgrade extends Message<Upgrade, Upgrade.Builder> {
    public static final ProtoAdapter<Upgrade> ADAPTER = new ProtoAdapter_Upgrade();

    private static final long serialVersionUID = 0L;

    public static final UpgradeType DEFAULT_TYPE = UpgradeType.UNKNOWN_UPGRADE;

    public static final String DEFAULT_DISPLAY_NAME = "";

    public static final String DEFAULT_DESCRIPTION = "";

    public static final String DEFAULT_IMAGE_URL = "";

    @WireField(
        tag = 1,
        adapter = "au.com.codeka.warworlds.common.proto.Design$UpgradeType#ADAPTER"
    )
    public final UpgradeType type;

    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String display_name;

    @WireField(
        tag = 3,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String description;

    @WireField(
        tag = 4,
        adapter = "au.com.codeka.warworlds.common.proto.Design$BuildCost#ADAPTER"
    )
    public final BuildCost build_cost;

    @WireField(
        tag = 5,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String image_url;

    @WireField(
        tag = 6,
        adapter = "au.com.codeka.warworlds.common.proto.Design$Dependency#ADAPTER",
        label = WireField.Label.REPEATED
    )
    public final List<Dependency> dependencies;

    @WireField(
        tag = 7,
        adapter = "au.com.codeka.warworlds.common.proto.Design$Effect#ADAPTER",
        label = WireField.Label.REPEATED
    )
    public final List<Effect> effects;

    public Upgrade(UpgradeType type, String display_name, String description, BuildCost build_cost, String image_url, List<Dependency> dependencies, List<Effect> effects) {
      this(type, display_name, description, build_cost, image_url, dependencies, effects, ByteString.EMPTY);
    }

    public Upgrade(UpgradeType type, String display_name, String description, BuildCost build_cost, String image_url, List<Dependency> dependencies, List<Effect> effects, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.type = type;
      this.display_name = display_name;
      this.description = description;
      this.build_cost = build_cost;
      this.image_url = image_url;
      this.dependencies = Internal.immutableCopyOf("dependencies", dependencies);
      this.effects = Internal.immutableCopyOf("effects", effects);
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.type = type;
      builder.display_name = display_name;
      builder.description = description;
      builder.build_cost = build_cost;
      builder.image_url = image_url;
      builder.dependencies = Internal.copyOf("dependencies", dependencies);
      builder.effects = Internal.copyOf("effects", effects);
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Upgrade)) return false;
      Upgrade o = (Upgrade) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(type, o.type)
          && Internal.equals(display_name, o.display_name)
          && Internal.equals(description, o.description)
          && Internal.equals(build_cost, o.build_cost)
          && Internal.equals(image_url, o.image_url)
          && Internal.equals(dependencies, o.dependencies)
          && Internal.equals(effects, o.effects);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (type != null ? type.hashCode() : 0);
        result = result * 37 + (display_name != null ? display_name.hashCode() : 0);
        result = result * 37 + (description != null ? description.hashCode() : 0);
        result = result * 37 + (build_cost != null ? build_cost.hashCode() : 0);
        result = result * 37 + (image_url != null ? image_url.hashCode() : 0);
        result = result * 37 + (dependencies != null ? dependencies.hashCode() : 1);
        result = result * 37 + (effects != null ? effects.hashCode() : 1);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (type != null) builder.append(", type=").append(type);
      if (display_name != null) builder.append(", display_name=").append(display_name);
      if (description != null) builder.append(", description=").append(description);
      if (build_cost != null) builder.append(", build_cost=").append(build_cost);
      if (image_url != null) builder.append(", image_url=").append(image_url);
      if (dependencies != null) builder.append(", dependencies=").append(dependencies);
      if (effects != null) builder.append(", effects=").append(effects);
      return builder.replace(0, 2, "Upgrade{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Upgrade, Builder> {
      public UpgradeType type;

      public String display_name;

      public String description;

      public BuildCost build_cost;

      public String image_url;

      public List<Dependency> dependencies;

      public List<Effect> effects;

      public Builder() {
        dependencies = Internal.newMutableList();
        effects = Internal.newMutableList();
      }

      public Builder type(UpgradeType type) {
        this.type = type;
        return this;
      }

      public Builder display_name(String display_name) {
        this.display_name = display_name;
        return this;
      }

      public Builder description(String description) {
        this.description = description;
        return this;
      }

      public Builder build_cost(BuildCost build_cost) {
        this.build_cost = build_cost;
        return this;
      }

      public Builder image_url(String image_url) {
        this.image_url = image_url;
        return this;
      }

      public Builder dependencies(List<Dependency> dependencies) {
        Internal.checkElementsNotNull(dependencies);
        this.dependencies = dependencies;
        return this;
      }

      public Builder effects(List<Effect> effects) {
        Internal.checkElementsNotNull(effects);
        this.effects = effects;
        return this;
      }

      @Override
      public Upgrade build() {
        return new Upgrade(type, display_name, description, build_cost, image_url, dependencies, effects, buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_Upgrade extends ProtoAdapter<Upgrade> {
      ProtoAdapter_Upgrade() {
        super(FieldEncoding.LENGTH_DELIMITED, Upgrade.class);
      }

      @Override
      public int encodedSize(Upgrade value) {
        return (value.type != null ? UpgradeType.ADAPTER.encodedSizeWithTag(1, value.type) : 0)
            + (value.display_name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.display_name) : 0)
            + (value.description != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.description) : 0)
            + (value.build_cost != null ? BuildCost.ADAPTER.encodedSizeWithTag(4, value.build_cost) : 0)
            + (value.image_url != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.image_url) : 0)
            + Dependency.ADAPTER.asRepeated().encodedSizeWithTag(6, value.dependencies)
            + Effect.ADAPTER.asRepeated().encodedSizeWithTag(7, value.effects)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Upgrade value) throws IOException {
        if (value.type != null) UpgradeType.ADAPTER.encodeWithTag(writer, 1, value.type);
        if (value.display_name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.display_name);
        if (value.description != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.description);
        if (value.build_cost != null) BuildCost.ADAPTER.encodeWithTag(writer, 4, value.build_cost);
        if (value.image_url != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.image_url);
        if (value.dependencies != null) Dependency.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.dependencies);
        if (value.effects != null) Effect.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.effects);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Upgrade decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: {
              try {
                builder.type(UpgradeType.ADAPTER.decode(reader));
              } catch (ProtoAdapter.EnumConstantNotFoundException e) {
                builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
              }
              break;
            }
            case 2: builder.display_name(ProtoAdapter.STRING.decode(reader)); break;
            case 3: builder.description(ProtoAdapter.STRING.decode(reader)); break;
            case 4: builder.build_cost(BuildCost.ADAPTER.decode(reader)); break;
            case 5: builder.image_url(ProtoAdapter.STRING.decode(reader)); break;
            case 6: builder.dependencies.add(Dependency.ADAPTER.decode(reader)); break;
            case 7: builder.effects.add(Effect.ADAPTER.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Upgrade redact(Upgrade value) {
        Builder builder = value.newBuilder();
        if (builder.build_cost != null) builder.build_cost = BuildCost.ADAPTER.redact(builder.build_cost);
        Internal.redactElements(builder.dependencies, Dependency.ADAPTER);
        Internal.redactElements(builder.effects, Effect.ADAPTER);
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  private static final class ProtoAdapter_Design extends ProtoAdapter<Design> {
    ProtoAdapter_Design() {
      super(FieldEncoding.LENGTH_DELIMITED, Design.class);
    }

    @Override
    public int encodedSize(Design value) {
      return (value.type != null ? DesignType.ADAPTER.encodedSizeWithTag(1, value.type) : 0)
          + (value.display_name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.display_name) : 0)
          + (value.description != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.description) : 0)
          + (value.build_cost != null ? BuildCost.ADAPTER.encodedSizeWithTag(4, value.build_cost) : 0)
          + (value.image_url != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.image_url) : 0)
          + (value.design_kind != null ? DesignKind.ADAPTER.encodedSizeWithTag(6, value.design_kind) : 0)
          + Dependency.ADAPTER.asRepeated().encodedSizeWithTag(7, value.dependencies)
          + Effect.ADAPTER.asRepeated().encodedSizeWithTag(8, value.effect)
          + (value.max_per_colony != null ? ProtoAdapter.INT32.encodedSizeWithTag(9, value.max_per_colony) : 0)
          + (value.max_per_empire != null ? ProtoAdapter.INT32.encodedSizeWithTag(10, value.max_per_empire) : 0)
          + (value.show_in_solar_system != null ? ProtoAdapter.BOOL.encodedSizeWithTag(11, value.show_in_solar_system) : 0)
          + Upgrade.ADAPTER.asRepeated().encodedSizeWithTag(12, value.upgrades)
          + (value.speed_px_per_hour != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(13, value.speed_px_per_hour) : 0)
          + (value.fuel_cost_per_px != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(14, value.fuel_cost_per_px) : 0)
          + (value.base_attack != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(15, value.base_attack) : 0)
          + (value.base_defence != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(16, value.base_defence) : 0)
          + (value.combat_priority != null ? ProtoAdapter.INT32.encodedSizeWithTag(17, value.combat_priority) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Design value) throws IOException {
      if (value.type != null) DesignType.ADAPTER.encodeWithTag(writer, 1, value.type);
      if (value.display_name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.display_name);
      if (value.description != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.description);
      if (value.build_cost != null) BuildCost.ADAPTER.encodeWithTag(writer, 4, value.build_cost);
      if (value.image_url != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.image_url);
      if (value.design_kind != null) DesignKind.ADAPTER.encodeWithTag(writer, 6, value.design_kind);
      if (value.dependencies != null) Dependency.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.dependencies);
      if (value.effect != null) Effect.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.effect);
      if (value.max_per_colony != null) ProtoAdapter.INT32.encodeWithTag(writer, 9, value.max_per_colony);
      if (value.max_per_empire != null) ProtoAdapter.INT32.encodeWithTag(writer, 10, value.max_per_empire);
      if (value.show_in_solar_system != null) ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.show_in_solar_system);
      if (value.upgrades != null) Upgrade.ADAPTER.asRepeated().encodeWithTag(writer, 12, value.upgrades);
      if (value.speed_px_per_hour != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 13, value.speed_px_per_hour);
      if (value.fuel_cost_per_px != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 14, value.fuel_cost_per_px);
      if (value.base_attack != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 15, value.base_attack);
      if (value.base_defence != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 16, value.base_defence);
      if (value.combat_priority != null) ProtoAdapter.INT32.encodeWithTag(writer, 17, value.combat_priority);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Design decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.type(DesignType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.display_name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.description(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.build_cost(BuildCost.ADAPTER.decode(reader)); break;
          case 5: builder.image_url(ProtoAdapter.STRING.decode(reader)); break;
          case 6: {
            try {
              builder.design_kind(DesignKind.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 7: builder.dependencies.add(Dependency.ADAPTER.decode(reader)); break;
          case 8: builder.effect.add(Effect.ADAPTER.decode(reader)); break;
          case 9: builder.max_per_colony(ProtoAdapter.INT32.decode(reader)); break;
          case 10: builder.max_per_empire(ProtoAdapter.INT32.decode(reader)); break;
          case 11: builder.show_in_solar_system(ProtoAdapter.BOOL.decode(reader)); break;
          case 12: builder.upgrades.add(Upgrade.ADAPTER.decode(reader)); break;
          case 13: builder.speed_px_per_hour(ProtoAdapter.FLOAT.decode(reader)); break;
          case 14: builder.fuel_cost_per_px(ProtoAdapter.FLOAT.decode(reader)); break;
          case 15: builder.base_attack(ProtoAdapter.FLOAT.decode(reader)); break;
          case 16: builder.base_defence(ProtoAdapter.FLOAT.decode(reader)); break;
          case 17: builder.combat_priority(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Design redact(Design value) {
      Builder builder = value.newBuilder();
      if (builder.build_cost != null) builder.build_cost = BuildCost.ADAPTER.redact(builder.build_cost);
      Internal.redactElements(builder.dependencies, Dependency.ADAPTER);
      Internal.redactElements(builder.effect, Effect.ADAPTER);
      Internal.redactElements(builder.upgrades, Upgrade.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
