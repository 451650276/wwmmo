// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: colony.proto at 6:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Float;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * Represents a colony that's on a planet.
 */
public final class Colony extends Message<Colony, Colony.Builder> {
  public static final ProtoAdapter<Colony> ADAPTER = new ProtoAdapter_Colony();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_EMPIRE_ID = 0L;

  public static final Float DEFAULT_POPULATION = 0.0f;

  public static final Float DEFAULT_DELTA_POPULATION = 0.0f;

  public static final Float DEFAULT_DELTA_GOODS = 0.0f;

  public static final Float DEFAULT_DELTA_MINERALS = 0.0f;

  public static final Float DEFAULT_DELTA_ENERGY = 0.0f;

  public static final Float DEFAULT_DEFENCE_BONUS = 0.0f;

  public static final Long DEFAULT_COOLDOWN_END_TIME = 0L;

  /**
   * The ID of this colony, so that it can be referred to by other entities.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long id;

  /**
   * The ID of the empire that owns this colony.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long empire_id;

  /**
   * The population of the colony.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float population;

  /**
   * The "focus" of this colony.
   */
  @WireField(
      tag = 4,
      adapter = "au.com.codeka.warworlds.common.proto.ColonyFocus#ADAPTER"
  )
  public final ColonyFocus focus;

  /**
   * After simulating, these will contain the delta values (i.e. how much do the goods or whatever
   * changed in this colony) per hour.
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float delta_population;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float delta_goods;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float delta_minerals;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float delta_energy;

  /**
   * The colony's defence bonus, which when multiplied by one quarter of the population gives the
   * colony's total defence score.
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float defence_bonus;

  /**
   * If set, this is the time the "cooldown" period ends. While in cooldown, the colony will not
   * lose population
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long cooldown_end_time;

  /**
   * collection of buildings in this colony.
   */
  @WireField(
      tag = 11,
      adapter = "au.com.codeka.warworlds.common.proto.Building#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Building> buildings;

  public Colony(Long id, Long empire_id, Float population, ColonyFocus focus, Float delta_population, Float delta_goods, Float delta_minerals, Float delta_energy, Float defence_bonus, Long cooldown_end_time, List<Building> buildings) {
    this(id, empire_id, population, focus, delta_population, delta_goods, delta_minerals, delta_energy, defence_bonus, cooldown_end_time, buildings, ByteString.EMPTY);
  }

  public Colony(Long id, Long empire_id, Float population, ColonyFocus focus, Float delta_population, Float delta_goods, Float delta_minerals, Float delta_energy, Float defence_bonus, Long cooldown_end_time, List<Building> buildings, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.empire_id = empire_id;
    this.population = population;
    this.focus = focus;
    this.delta_population = delta_population;
    this.delta_goods = delta_goods;
    this.delta_minerals = delta_minerals;
    this.delta_energy = delta_energy;
    this.defence_bonus = defence_bonus;
    this.cooldown_end_time = cooldown_end_time;
    this.buildings = Internal.immutableCopyOf("buildings", buildings);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.empire_id = empire_id;
    builder.population = population;
    builder.focus = focus;
    builder.delta_population = delta_population;
    builder.delta_goods = delta_goods;
    builder.delta_minerals = delta_minerals;
    builder.delta_energy = delta_energy;
    builder.defence_bonus = defence_bonus;
    builder.cooldown_end_time = cooldown_end_time;
    builder.buildings = Internal.copyOf("buildings", buildings);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Colony)) return false;
    Colony o = (Colony) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(empire_id, o.empire_id)
        && Internal.equals(population, o.population)
        && Internal.equals(focus, o.focus)
        && Internal.equals(delta_population, o.delta_population)
        && Internal.equals(delta_goods, o.delta_goods)
        && Internal.equals(delta_minerals, o.delta_minerals)
        && Internal.equals(delta_energy, o.delta_energy)
        && Internal.equals(defence_bonus, o.defence_bonus)
        && Internal.equals(cooldown_end_time, o.cooldown_end_time)
        && Internal.equals(buildings, o.buildings);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (empire_id != null ? empire_id.hashCode() : 0);
      result = result * 37 + (population != null ? population.hashCode() : 0);
      result = result * 37 + (focus != null ? focus.hashCode() : 0);
      result = result * 37 + (delta_population != null ? delta_population.hashCode() : 0);
      result = result * 37 + (delta_goods != null ? delta_goods.hashCode() : 0);
      result = result * 37 + (delta_minerals != null ? delta_minerals.hashCode() : 0);
      result = result * 37 + (delta_energy != null ? delta_energy.hashCode() : 0);
      result = result * 37 + (defence_bonus != null ? defence_bonus.hashCode() : 0);
      result = result * 37 + (cooldown_end_time != null ? cooldown_end_time.hashCode() : 0);
      result = result * 37 + (buildings != null ? buildings.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (empire_id != null) builder.append(", empire_id=").append(empire_id);
    if (population != null) builder.append(", population=").append(population);
    if (focus != null) builder.append(", focus=").append(focus);
    if (delta_population != null) builder.append(", delta_population=").append(delta_population);
    if (delta_goods != null) builder.append(", delta_goods=").append(delta_goods);
    if (delta_minerals != null) builder.append(", delta_minerals=").append(delta_minerals);
    if (delta_energy != null) builder.append(", delta_energy=").append(delta_energy);
    if (defence_bonus != null) builder.append(", defence_bonus=").append(defence_bonus);
    if (cooldown_end_time != null) builder.append(", cooldown_end_time=").append(cooldown_end_time);
    if (buildings != null) builder.append(", buildings=").append(buildings);
    return builder.replace(0, 2, "Colony{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Colony, Builder> {
    public Long id;

    public Long empire_id;

    public Float population;

    public ColonyFocus focus;

    public Float delta_population;

    public Float delta_goods;

    public Float delta_minerals;

    public Float delta_energy;

    public Float defence_bonus;

    public Long cooldown_end_time;

    public List<Building> buildings;

    public Builder() {
      buildings = Internal.newMutableList();
    }

    /**
     * The ID of this colony, so that it can be referred to by other entities.
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * The ID of the empire that owns this colony.
     */
    public Builder empire_id(Long empire_id) {
      this.empire_id = empire_id;
      return this;
    }

    /**
     * The population of the colony.
     */
    public Builder population(Float population) {
      this.population = population;
      return this;
    }

    /**
     * The "focus" of this colony.
     */
    public Builder focus(ColonyFocus focus) {
      this.focus = focus;
      return this;
    }

    /**
     * After simulating, these will contain the delta values (i.e. how much do the goods or whatever
     * changed in this colony) per hour.
     */
    public Builder delta_population(Float delta_population) {
      this.delta_population = delta_population;
      return this;
    }

    public Builder delta_goods(Float delta_goods) {
      this.delta_goods = delta_goods;
      return this;
    }

    public Builder delta_minerals(Float delta_minerals) {
      this.delta_minerals = delta_minerals;
      return this;
    }

    public Builder delta_energy(Float delta_energy) {
      this.delta_energy = delta_energy;
      return this;
    }

    /**
     * The colony's defence bonus, which when multiplied by one quarter of the population gives the
     * colony's total defence score.
     */
    public Builder defence_bonus(Float defence_bonus) {
      this.defence_bonus = defence_bonus;
      return this;
    }

    /**
     * If set, this is the time the "cooldown" period ends. While in cooldown, the colony will not
     * lose population
     */
    public Builder cooldown_end_time(Long cooldown_end_time) {
      this.cooldown_end_time = cooldown_end_time;
      return this;
    }

    /**
     * collection of buildings in this colony.
     */
    public Builder buildings(List<Building> buildings) {
      Internal.checkElementsNotNull(buildings);
      this.buildings = buildings;
      return this;
    }

    @Override
    public Colony build() {
      return new Colony(id, empire_id, population, focus, delta_population, delta_goods, delta_minerals, delta_energy, defence_bonus, cooldown_end_time, buildings, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Colony extends ProtoAdapter<Colony> {
    ProtoAdapter_Colony() {
      super(FieldEncoding.LENGTH_DELIMITED, Colony.class);
    }

    @Override
    public int encodedSize(Colony value) {
      return (value.id != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.empire_id != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.empire_id) : 0)
          + (value.population != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(3, value.population) : 0)
          + (value.focus != null ? ColonyFocus.ADAPTER.encodedSizeWithTag(4, value.focus) : 0)
          + (value.delta_population != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(5, value.delta_population) : 0)
          + (value.delta_goods != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(6, value.delta_goods) : 0)
          + (value.delta_minerals != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(7, value.delta_minerals) : 0)
          + (value.delta_energy != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(8, value.delta_energy) : 0)
          + (value.defence_bonus != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(9, value.defence_bonus) : 0)
          + (value.cooldown_end_time != null ? ProtoAdapter.INT64.encodedSizeWithTag(10, value.cooldown_end_time) : 0)
          + Building.ADAPTER.asRepeated().encodedSizeWithTag(11, value.buildings)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Colony value) throws IOException {
      if (value.id != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id);
      if (value.empire_id != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.empire_id);
      if (value.population != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.population);
      if (value.focus != null) ColonyFocus.ADAPTER.encodeWithTag(writer, 4, value.focus);
      if (value.delta_population != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 5, value.delta_population);
      if (value.delta_goods != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 6, value.delta_goods);
      if (value.delta_minerals != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 7, value.delta_minerals);
      if (value.delta_energy != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 8, value.delta_energy);
      if (value.defence_bonus != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 9, value.defence_bonus);
      if (value.cooldown_end_time != null) ProtoAdapter.INT64.encodeWithTag(writer, 10, value.cooldown_end_time);
      if (value.buildings != null) Building.ADAPTER.asRepeated().encodeWithTag(writer, 11, value.buildings);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Colony decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.empire_id(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.population(ProtoAdapter.FLOAT.decode(reader)); break;
          case 4: builder.focus(ColonyFocus.ADAPTER.decode(reader)); break;
          case 5: builder.delta_population(ProtoAdapter.FLOAT.decode(reader)); break;
          case 6: builder.delta_goods(ProtoAdapter.FLOAT.decode(reader)); break;
          case 7: builder.delta_minerals(ProtoAdapter.FLOAT.decode(reader)); break;
          case 8: builder.delta_energy(ProtoAdapter.FLOAT.decode(reader)); break;
          case 9: builder.defence_bonus(ProtoAdapter.FLOAT.decode(reader)); break;
          case 10: builder.cooldown_end_time(ProtoAdapter.INT64.decode(reader)); break;
          case 11: builder.buildings.add(Building.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Colony redact(Colony value) {
      Builder builder = value.newBuilder();
      if (builder.focus != null) builder.focus = ColonyFocus.ADAPTER.redact(builder.focus);
      Internal.redactElements(builder.buildings, Building.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
