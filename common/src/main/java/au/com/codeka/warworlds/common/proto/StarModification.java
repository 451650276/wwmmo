// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: star.proto at 163:1
package au.com.codeka.warworlds.common.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Every edit to a star is performed as an atomic modification. Colonizing a planet, adjusting focus
 * of a colony, etc. This is to ensure edits happen in a deterministic fashion and we can control
 * the locking and synchronization better.
 */
public final class StarModification extends Message<StarModification, StarModification.Builder> {
  public static final ProtoAdapter<StarModification> ADAPTER = new ProtoAdapter_StarModification();

  private static final long serialVersionUID = 0L;

  public static final MODIFICATION_TYPE DEFAULT_TYPE = MODIFICATION_TYPE.UNKNOWN;

  public static final Long DEFAULT_EMPIRE_ID = 0L;

  public static final Integer DEFAULT_PLANET_INDEX = 0;

  public static final Long DEFAULT_COLONY_ID = 0L;

  public static final Design.DesignType DEFAULT_DESIGN_TYPE = Design.DesignType.UNKNOWN_DESIGN;

  public static final Integer DEFAULT_COUNT = 0;

  public static final Long DEFAULT_BUILD_REQUEST_ID = 0L;

  @WireField(
      tag = 1,
      adapter = "au.com.codeka.warworlds.common.proto.StarModification$MODIFICATION_TYPE#ADAPTER"
  )
  public final MODIFICATION_TYPE type;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long empire_id;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer planet_index;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long colony_id;

  @WireField(
      tag = 5,
      adapter = "au.com.codeka.warworlds.common.proto.ColonyFocus#ADAPTER"
  )
  public final ColonyFocus focus;

  @WireField(
      tag = 6,
      adapter = "au.com.codeka.warworlds.common.proto.Design$DesignType#ADAPTER"
  )
  public final Design.DesignType design_type;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer count;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long build_request_id;

  public StarModification(MODIFICATION_TYPE type, Long empire_id, Integer planet_index, Long colony_id, ColonyFocus focus, Design.DesignType design_type, Integer count, Long build_request_id) {
    this(type, empire_id, planet_index, colony_id, focus, design_type, count, build_request_id, ByteString.EMPTY);
  }

  public StarModification(MODIFICATION_TYPE type, Long empire_id, Integer planet_index, Long colony_id, ColonyFocus focus, Design.DesignType design_type, Integer count, Long build_request_id, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.empire_id = empire_id;
    this.planet_index = planet_index;
    this.colony_id = colony_id;
    this.focus = focus;
    this.design_type = design_type;
    this.count = count;
    this.build_request_id = build_request_id;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.empire_id = empire_id;
    builder.planet_index = planet_index;
    builder.colony_id = colony_id;
    builder.focus = focus;
    builder.design_type = design_type;
    builder.count = count;
    builder.build_request_id = build_request_id;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof StarModification)) return false;
    StarModification o = (StarModification) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(empire_id, o.empire_id)
        && Internal.equals(planet_index, o.planet_index)
        && Internal.equals(colony_id, o.colony_id)
        && Internal.equals(focus, o.focus)
        && Internal.equals(design_type, o.design_type)
        && Internal.equals(count, o.count)
        && Internal.equals(build_request_id, o.build_request_id);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (empire_id != null ? empire_id.hashCode() : 0);
      result = result * 37 + (planet_index != null ? planet_index.hashCode() : 0);
      result = result * 37 + (colony_id != null ? colony_id.hashCode() : 0);
      result = result * 37 + (focus != null ? focus.hashCode() : 0);
      result = result * 37 + (design_type != null ? design_type.hashCode() : 0);
      result = result * 37 + (count != null ? count.hashCode() : 0);
      result = result * 37 + (build_request_id != null ? build_request_id.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (empire_id != null) builder.append(", empire_id=").append(empire_id);
    if (planet_index != null) builder.append(", planet_index=").append(planet_index);
    if (colony_id != null) builder.append(", colony_id=").append(colony_id);
    if (focus != null) builder.append(", focus=").append(focus);
    if (design_type != null) builder.append(", design_type=").append(design_type);
    if (count != null) builder.append(", count=").append(count);
    if (build_request_id != null) builder.append(", build_request_id=").append(build_request_id);
    return builder.replace(0, 2, "StarModification{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<StarModification, Builder> {
    public MODIFICATION_TYPE type;

    public Long empire_id;

    public Integer planet_index;

    public Long colony_id;

    public ColonyFocus focus;

    public Design.DesignType design_type;

    public Integer count;

    public Long build_request_id;

    public Builder() {
    }

    public Builder type(MODIFICATION_TYPE type) {
      this.type = type;
      return this;
    }

    public Builder empire_id(Long empire_id) {
      this.empire_id = empire_id;
      return this;
    }

    public Builder planet_index(Integer planet_index) {
      this.planet_index = planet_index;
      return this;
    }

    public Builder colony_id(Long colony_id) {
      this.colony_id = colony_id;
      return this;
    }

    public Builder focus(ColonyFocus focus) {
      this.focus = focus;
      return this;
    }

    public Builder design_type(Design.DesignType design_type) {
      this.design_type = design_type;
      return this;
    }

    public Builder count(Integer count) {
      this.count = count;
      return this;
    }

    public Builder build_request_id(Long build_request_id) {
      this.build_request_id = build_request_id;
      return this;
    }

    @Override
    public StarModification build() {
      return new StarModification(type, empire_id, planet_index, colony_id, focus, design_type, count, build_request_id, buildUnknownFields());
    }
  }

  public enum MODIFICATION_TYPE implements WireEnum {
    /**
     * Do not use.
     */
    UNKNOWN(0),

    /**
     * Colonize a planet on the star.
     * empire_id and planet_index are required.
     */
    COLONIZE(1),

    /**
     * Adjust a colony's focus.
     * empire_id, colony_id and focus are required.
     */
    ADJUST_FOCUS(2),

    /**
     * Create a new fleet, ignored if sent from client.
     * empire_id, design_type and count are required.
     */
    CREATE_FLEET(3),

    /**
     * Add a build request, start building it.
     * empire_id, colony_id, design_type are required.
     * count is required for ship builds.
     */
    ADD_BUILD_REQUEST(4),

    /**
     * Create a new building, ignored if sent from client.
     * empire_id, colony_id, design_type are required.
     * If build_request_id is specified, that build requests will be removed as well.
     */
    CREATE_BUILDING(5);

    public static final ProtoAdapter<MODIFICATION_TYPE> ADAPTER = ProtoAdapter.newEnumAdapter(MODIFICATION_TYPE.class);

    private final int value;

    MODIFICATION_TYPE(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static MODIFICATION_TYPE fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return COLONIZE;
        case 2: return ADJUST_FOCUS;
        case 3: return CREATE_FLEET;
        case 4: return ADD_BUILD_REQUEST;
        case 5: return CREATE_BUILDING;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_StarModification extends ProtoAdapter<StarModification> {
    ProtoAdapter_StarModification() {
      super(FieldEncoding.LENGTH_DELIMITED, StarModification.class);
    }

    @Override
    public int encodedSize(StarModification value) {
      return (value.type != null ? MODIFICATION_TYPE.ADAPTER.encodedSizeWithTag(1, value.type) : 0)
          + (value.empire_id != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.empire_id) : 0)
          + (value.planet_index != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.planet_index) : 0)
          + (value.colony_id != null ? ProtoAdapter.INT64.encodedSizeWithTag(4, value.colony_id) : 0)
          + (value.focus != null ? ColonyFocus.ADAPTER.encodedSizeWithTag(5, value.focus) : 0)
          + (value.design_type != null ? Design.DesignType.ADAPTER.encodedSizeWithTag(6, value.design_type) : 0)
          + (value.count != null ? ProtoAdapter.INT32.encodedSizeWithTag(7, value.count) : 0)
          + (value.build_request_id != null ? ProtoAdapter.INT64.encodedSizeWithTag(8, value.build_request_id) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, StarModification value) throws IOException {
      if (value.type != null) MODIFICATION_TYPE.ADAPTER.encodeWithTag(writer, 1, value.type);
      if (value.empire_id != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.empire_id);
      if (value.planet_index != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.planet_index);
      if (value.colony_id != null) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.colony_id);
      if (value.focus != null) ColonyFocus.ADAPTER.encodeWithTag(writer, 5, value.focus);
      if (value.design_type != null) Design.DesignType.ADAPTER.encodeWithTag(writer, 6, value.design_type);
      if (value.count != null) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.count);
      if (value.build_request_id != null) ProtoAdapter.INT64.encodeWithTag(writer, 8, value.build_request_id);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public StarModification decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.type(MODIFICATION_TYPE.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.empire_id(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.planet_index(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.colony_id(ProtoAdapter.INT64.decode(reader)); break;
          case 5: builder.focus(ColonyFocus.ADAPTER.decode(reader)); break;
          case 6: {
            try {
              builder.design_type(Design.DesignType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 7: builder.count(ProtoAdapter.INT32.decode(reader)); break;
          case 8: builder.build_request_id(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public StarModification redact(StarModification value) {
      Builder builder = value.newBuilder();
      if (builder.focus != null) builder.focus = ColonyFocus.ADAPTER.redact(builder.focus);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
