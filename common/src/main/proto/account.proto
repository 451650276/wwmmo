package au.com.codeka.warworlds.common.proto;

import "common.proto";
import "empire.proto";

message NewAccountRequest {
  optional string empire_name = 1;
}

message NewAccountResponse {
  optional string cookie = 1;
  optional string message = 2;
}

// The request for /accounts/associate requests to associate a firebase user with an account.
message AccountAssociateRequest {
  optional string cookie = 1;
  optional string token = 2;

  // If the token is associated with another account, or the empire already has an account
  // associated with it, we'll return an error unless force is true, in which case we'll do it
  // anyway.
  optional bool force = 3;
}

message AccountAssociateResponse {
  enum AccountAssociateStatus {
    STATUS_UNKNOWN = 0;
    SUCCESS = 1;

    // The account is already associated with another firebase user, and cannot be associated with
    // this one.
    ACCOUNT_ALREADY_ASSOCIATED = 2;

    // The firebase user is already associated with a different account, cannot be associated with
    // this new account, unless the user specified force=true in the request.
    TOKEN_ALREADY_ASSOCIATED = 3;
  }
  optional AccountAssociateStatus status = 1;
}

// This is the account object that's stored in the data store. It links to your empire and other
// details about your account.
message Account {
  optional int64 empire_id = 1;

  // If this account is associated with a firebase user, this will be the user's UID & email
  // address.
  optional string uid = 2;
  optional string email = 3;
}

// This is sent to the /login endpoint in order to log in to the server.
message LoginRequest {
  // Your login cookie. Required.
  optional string cookie = 1;
}

// This is sent from the /login endpoing in response to a LoginRequest.
message LoginResponse {
  enum LoginStatus {
    LOGINSTATUS_UNKNOWN = 0;

    // Login was successful.
    SUCCESS = 1;
  }
  optional LoginStatus status = 1;

  // The host to connect to.
  optional string host = 2;

  // The port to connect to.
  optional int32 port = 3;

  // If specified, the Empire you're currently logged in as (if not specified, it means
  // you haven't set up an empire yet, and you should do that before anything else...)
  optional Empire empire = 4;

  // If true, it means we need to re-register with GCM (maybe because last time it failed)
  optional bool require_gcm_register = 5;

  // If true, we'll force the ads to be removed. If false, or not specified, we'll check
  // whatever the In-App Purchase API has to say.
  optional bool force_remove_ads = 6;
}
