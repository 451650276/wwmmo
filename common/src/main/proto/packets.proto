package au.com.codeka.warworlds.common.proto;

import "common.proto";
import "chat.proto";
import "empire.proto";
import "star.proto";

// Wrapper class for all the packets.
message Packet {
  optional HelloPacket hello = 1;
  optional WatchSectorsPacket watch_sectors = 2;
  optional StarUpdatedPacket star_updated = 3;
  optional ModifyStarPacket modify_star = 4;
  optional RequestEmpirePacket request_empire = 5;
  optional EmpireDetailsPacket empire_details = 6;
  optional ChatMessagesPacket chat_msgs = 7;
}

// The "hello" packet that's sent by the client when it first connects to the game socket.
message HelloPacket {
  // The ID of the empire you're connecting as. You should already know this from the response to
  // the login request.
  optional int64 empire_id = 1;
}

// Requests that we want updates about all stars in sectors between (left,top) and (right,bottom)
// inclusive. Sending a new WatchSectors packet will override your previous watched sectors. You
// will immediately receive a StarUpdatedPacket with all of the stars in the sectors you've
// requested.
message WatchSectorsPacket {
  optional int64 top = 1;
  optional int64 left = 2;
  optional int64 right = 3;
  optional int64 bottom = 4;
}

// Sent from the server when a Star is updated. You can get more than one star update in a packet.
message StarUpdatedPacket {
  repeated Star stars = 1;
}

// Send from the client to the server when it wants to modify a star. The server will modify the
// star then send StarUpdatedPackets to everybody who is interested in this star.
message ModifyStarPacket {
  optional int64 star_id = 1;
  repeated StarModification modification = 2;
}

// Requests details about an empire, or empires.
message RequestEmpirePacket {
  // The ID of the empire you want details of. Required.
  repeated int64 empire_id = 1;
}

// The response to a RequestEmpirePacket, contains details of the empire(s) you requested.
message EmpireDetailsPacket {
  // The empire(s) that you requested in RequestEmpirePacket.
  repeated Empire empires = 1;
}

// A bunch of chat messages. If sending to the server, should contain only a single message. If
// being received from the server, could contain multiple messages for multiple rooms.
message ChatMessagesPacket {
  repeated ChatMessage messages = 1;
}